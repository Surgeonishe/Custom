
&НаКлиенте
Перем ЗакрытиеРазрешено;

&НаСервере
Процедура ПриСозданииНаСервере ( Отказ, СтандартнаяОбработка )
	
	обновитьФорму ();
	
КонецПроцедуры

&НаСервере
Процедура обновитьФорму ()
	
	заполнитьТаблицу ();
	установитьВидимость ();
	обновитьОформление ();
	
КонецПроцедуры

&НаСервере
Процедура установитьВидимость ()
	
	видимость = РольДоступна ( "ПолныеПрава" );
	Элементы.ТаблицаСсылка.Видимость = видимость;
	Элементы.ТаблицаПорядокСортировки.Видимость = видимость;
	
КонецПроцедуры 

&НаСервере
Процедура заполнитьТаблицу ()
	
	Объект.Таблица.Очистить ();
	с = "
	|выбрать
	|	Контроль как Контроль,
	|	СуммаПоДокументу как Сумма
	|поместить ВТЭкспедиторскиеУслуги
	|из
	|	Документ.ЭкспедиторскиеУслуги
	|где
	|	выбор
	|		когда Контроль = значение ( Документ.Контроль.ПустаяСсылка )
	|			тогда ложь
	|		иначе
	|			истина
	|	конец
	|	и не ПометкаУдаления
	|	и Проведен 
	|; 
	|выбрать
	|	Док.Номер как Номер,
	|	Док.Дата как Дата,
	|	Док.Ссылка как Ссылка,
	|	Док.Транспорт как Транспорт,
	|	Док.Контрагент как Контрагент,
	|	Док.Порт как Порт,
	|	Док.Комментарий как Комментарий,
	|	Док.Вес как Вес,
	|	Док.ВесПеревес как ВесПеревес,
	|	Док.ВесПЛ как ВесПЛ,
	|	Док.ДатаПолучения как ДатаПолучения,
	|	Док.ДатаПрихода как ДатаПрихода,
	|	Док.ДатаРасчета как ДатаРасчета,
	|	Док.Линия как Линия,
	|	Док.Номенклатура как Номенклатура,
	|	Док.Организация как Организация,
	|	Док.ПакингЛист как ПакингЛист,
	|	Док.ПортВыгрузка как ПортВыгрузка,
	|	Док.СтранаОтправления как СтранаОтправления,
	|	естьnull ( ВТЭкспедиторскиеУслуги.Сумма, 0 )  как Сумма,
	|	Док.Экспедитор как Экспедитор,
	|	естьnull ( Регистр.ПорядокСортировки, 0 ) как ПорядокСортировки 
	|из
	|	Документ.Контроль как Док
	|	левое соединение РегистрСведений.ПорядокДокументовКонтроль как Регистр
	|	по Регистр.Пользователь = &Пользователь
	|		и Регистр.Ссылка = Док.Ссылка
	|	левое соединение ВТЭкспедиторскиеУслуги как ВТЭкспедиторскиеУслуги
	|	по ВТЭкспедиторскиеУслуги.Контроль = Док.Ссылка 
	|где
	|	Док.Статус <> значение ( Перечисление.СтатусыКонтроль.Оформлен )
	|упорядочить по
	|	естьnull ( Регистр.ПорядокСортировки, 0 ), Док.Номер
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "Пользователь", ПараметрыСеанса.ТекущийПользователь );
	результат = запрос.Выполнить ();
	Объект.Таблица.Загрузить ( результат.Выгрузить () ); 
	
КонецПроцедуры

&НаСервере
Функция получитьТаблицуПорядка ()
	
	набор = РегистрыСведений.ПорядокДокументовКонтроль.СоздатьНаборЗаписей ();
	набор.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	набор.Прочитать ();
	Если ( набор.Выбран () ) Тогда
		т = набор.Выгрузить ();
	Иначе
		т = Неопределено; 	
	КонецЕсли; 
	Возврат т;

КонецФункции 

&НаКлиенте
Процедура ПереместитьВверх ( Команда )
	
	сдвинутьСтроку ( - 1 );
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз ( Команда )
	
	сдвинутьСтроку ( 1 );
	
КонецПроцедуры

&НаКлиенте
Процедура сдвинутьСтроку ( Направление )
	
	индексы = сортироватьСтроки ( Элементы.Таблица.ВыделенныеСтроки, Направление );
	Если ( индексы.Количество () > 0 ) Тогда
		Для Каждого индекс Из индексы Цикл
			Объект.Таблица.Сдвинуть ( индекс, Направление );			
		КонецЦикла; 
	КонецЕсли;
	заполнитьПорядокСортировки ();
	
КонецПроцедуры 

&НаКлиенте
Функция сортироватьСтроки ( Выделенные, Направление )
	
	индексы = Новый Массив ();
	Для Каждого идентификатор Из Выделенные Цикл
		строкаТЧ = Объект.Таблица.НайтиПоИдентификатору ( идентификатор );
		индекс = Объект.Таблица.Индекс ( строкаТЧ );
		индексы.Добавить ( индекс );	
	КонецЦикла; 
	сз = Новый СписокЗначений ();
	сз.ЗагрузитьЗначения ( индексы );
	порядок = ? ( Направление = 1, НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр );
	сз.СортироватьПоЗначению ( порядок );
	Возврат сз.ВыгрузитьЗначения ();

КонецФункции 

&НаКлиенте
Процедура заполнитьПорядокСортировки ()
	
	Для Каждого строкаТЧ Из Объект.Таблица Цикл
		строкаТЧ.ПорядокСортировки = строкаТЧ.НомерСтроки;		
	КонецЦикла; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьДокумент ( Команда )
	
	новая = Объект.Таблица.Добавить ();
	новая.ПорядокСортировки = новая.НомерСтроки;
	новая.Ссылка = создатьДокумент ();
	Элементы.Таблица.ТекущаяСтрока = новая.ПолучитьИдентификатор ();
	ТекущийЭлемент = Элементы.ТаблицаТранспорт;
	Элементы.Таблица.ИзменитьСтроку ();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция создатьДокумент ()
	
	док = Документы.Контроль.СоздатьДокумент ();
	док.Дата = ТекущаяДата ();
	док.Записать ();
	Возврат док.Ссылка;

КонецФункции 

&НаКлиенте
Процедура ОбъединитьДокументы ( Команда )
	
	индексы = сортироватьСтроки ( Элементы.Таблица.ВыделенныеСтроки, - 1 );
	Если ( индексы.Количество () > 1 ) Тогда
		начальный = индексы [ 0 ];
		Для Каждого индекс Из индексы Цикл
			Если ( индекс = начальный ) Тогда
				Продолжить;
			КонецЕсли; 
			колво = - 1 * ( индекс - начальный - 1 );
			Объект.Таблица.Сдвинуть ( индекс, колво );				
		КонецЦикла;	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет ( Команда )
	
	отказ = проверитьВыделенныеЯчейки ();
	Если ( отказ ) Тогда
		Возврат;
	КонецЕсли; 
	диалог = Новый ДиалогВыбораЦвета ();
	диалог.Показать ( Новый ОписаниеОповещения ( "ВыборЦвета", ЭтотОбъект ) ); 
	
КонецПроцедуры

&НаКлиенте
Функция проверитьВыделенныеЯчейки ()
	
	выделенные = Элементы.Таблица.ВыделенныеСтроки;
	Если ( выделенные.Количество () = 0 ) Тогда
		отказ = Истина;
	Иначе
		отказ = Ложь;	
	КонецЕсли; 
	Возврат отказ;

КонецФункции 

&НаКлиенте
Процедура ОчиститьЦвет ( Команда )
	
	ВыборЦвета ( "", Неопределено ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЦвета ( Значение, Парамы ) Экспорт
	
	Если ( Значение = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	выделитьЯчейки ( Значение, "" ); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьШрифт ( Команда )
	
	отказ = проверитьВыделенныеЯчейки ();
	Если ( отказ ) Тогда
		Возврат;
	КонецЕсли;
	диалог = Новый ДиалогВыбораШрифта ();
	диалог.Показать ( Новый ОписаниеОповещения ( "ВыборШрифта", ЭтотОбъект ) );
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьШрифт ( Команда )
	
	ВыборШрифта ( "", Неопределено ); 

КонецПроцедуры

&НаКлиенте
Процедура ВыборШрифта ( Значение, Парамы ) Экспорт
	
	Если ( Значение = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	выделитьЯчейки ( "", Значение );
	
КонецПроцедуры

&НаКлиенте
Процедура выделитьЯчейки ( Цвет, Шрифт )	
	
	имя = Элементы.Таблица.ТекущийЭлемент.Имя;
	м = Новый Массив ();
	Для Каждого идентификатор Из Элементы.Таблица.ВыделенныеСтроки Цикл
		строкаТЧ = Объект.Таблица.НайтиПоИдентификатору ( идентификатор );
		м.Добавить ( строкаТЧ.Ссылка );
	КонецЦикла;
	п = Новый Структура ();
	п.Вставить ( "Поле", СтрЗаменить ( имя, "Таблица", "" ) );
	п.Вставить ( "Цвет", Цвет );
	п.Вставить ( "Шрифт", Шрифт );
	п.Вставить ( "Ссылки", м );
	записатьОформлениеВРегистр ( п );
	обновитьОформление ();
	
КонецПроцедуры

&НаСервере
Процедура обновитьОформление ()
	
 	УсловноеОформление.Элементы.Очистить ();
	оформление = получитьОформлениеПоЯчейкам ();
	Для Каждого запись Из оформление Цикл
		новая = УсловноеОформление.Элементы.Добавить ();
		новая.Использование = Истина;
		добавитьОформление ( новая, запись );
		добавитьОтбор ( новая, запись.Данные );
		добавитьПоле ( новая, запись.Поле );
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура записатьОформлениеВРегистр ( Данные )
	
	Для Каждого док Из Данные.Ссылки Цикл
		менеджер = РегистрыСведений.Оформление.СоздатьМенеджерЗаписи ();
		менеджер.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		менеджер.Данные = док;
		менеджер.Поле = Данные.Поле;
		Если ( Данные.Шрифт = "" И Данные.Цвет = "" ) Тогда
			менеджер.Удалить ();
		Иначе
			менеджер.Шрифт = получитьСтрокуШрифт ( Данные.Шрифт );
			менеджер.Цвет = получитьСтрокуЦвет ( Данные.Цвет );
			менеджер.Записать ();			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьСтрокуШрифт ( Шрифт ) 
	
	Если ( Шрифт = "" ) Тогда
		Возврат "";
	Иначе
		запись = Новый ЗаписьJSON ();
		запись.УстановитьСтроку ();
		п = Новый Структура ();
		п.Вставить ( "Вид", Шрифт.Вид ); 
		п.Вставить ( "Зачеркивание", Шрифт.Зачеркивание ); 
		п.Вставить ( "Имя", Шрифт.Имя ); 
		п.Вставить ( "Масштаб", Шрифт.Масштаб ); 
		п.Вставить ( "Наклонный", Шрифт.Наклонный ); 
		п.Вставить ( "Подчеркивание", Шрифт.Подчеркивание ); 
		п.Вставить ( "Полужирный", Шрифт.Полужирный ); 
		п.Вставить ( "Размер", Шрифт.Размер ); 
		СериализаторXDTO.ЗаписатьJSON ( запись, п, НазначениеТипаXML.Явное );
		Возврат запись.Закрыть ();
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция получитьСтрокуЦвет ( Значение ) 
	
	Если ( Значение = "" ) Тогда
		Возврат "";
	Иначе
		запись = Новый ЗаписьJSON ();
		запись.УстановитьСтроку ();
		СериализаторXDTO.ЗаписатьJSON ( запись, Значение, НазначениеТипаXML.Явное );
		Возврат запись.Закрыть ();
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция прочитатьИзСтрокиШрифт ( Значение ) 
	
	Если ( Значение = "" ) Тогда
		Возврат "";
	Иначе
		чтение = Новый ЧтениеJSON ();
		чтение.УстановитьСтроку ( Значение );
		п = СериализаторXDTO.ПрочитатьJSON ( чтение );
		чтение.Закрыть ();
		шрифт = Новый Шрифт ( п.Имя, п.Размер, п.Полужирный, п.Наклонный, п.Подчеркивание, п.Зачеркивание, п.Масштаб ); 
		Возврат шрифт; 
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция прочитатьИзСтрокиЦвет ( Значение ) 
	
	Если ( Значение = "" ) Тогда
		Возврат "";
	Иначе
		чтение = Новый ЧтениеJSON ();
		чтение.УстановитьСтроку ( Значение );
		с = СериализаторXDTO.ПрочитатьJSON ( чтение );
		чтение.Закрыть ();
		Возврат с; 
	КонецЕсли; 

КонецФункции

&НаСервереБезКонтекста
Функция получитьОформлениеПоЯчейкам ()
	
	с = "
	|выбрать
	|	Данные как Данные,
	|	Поле как Поле,
	|	Шрифт как Шрифт,
	|	Цвет как Цвет
	|из
	|	РегистрСведений.Оформление
	|где
	|	Пользователь = &Пользователь  
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "Пользователь", ПараметрыСеанса.ТекущийПользователь );
	Возврат запрос.Выполнить ().Выгрузить ();

КонецФункции 

&НаСервере
Процедура добавитьОформление ( Оформление, Данные )
	
	Если ( Данные.Шрифт <> "" ) Тогда
		шрифт = прочитатьИзСтрокиШрифт ( Данные.Шрифт );
		Оформление.Оформление.УстановитьЗначениеПараметра ( "Шрифт", шрифт );
		Оформление.Использование = Истина;
	КонецЕсли; 
	Если ( Данные.Цвет <> "" ) Тогда
		цвет = прочитатьИзСтрокиЦвет ( Данные.Цвет );
		Оформление.Оформление.УстановитьЗначениеПараметра ( "ЦветФона", цвет );
		Оформление.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура добавитьОтбор ( Оформление, Ссылка )
	
	отбор = Оформление.Отбор.Элементы.Добавить ( Тип ( "ЭлементОтбораКомпоновкиДанных" ) );
	отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных ( "Объект.Таблица.Ссылка" );
	отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	отбор.ПравоеЗначение = Ссылка;
	
КонецПроцедуры

&НаСервере
Процедура добавитьПоле ( Оформление, Имя )
	
	п = Оформление.Поля.Элементы.Добавить ();
	п.Поле = Новый ПолеКомпоновкиДанных ( "Таблица" + Имя );
	п.Использование = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаВыбор ( Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка )
	
	имя = Поле.Имя;
	Если ( имя = "ТаблицаНомер" ИЛИ имя = "ТаблицаДата" ИЛИ имя = "ТаблицаСсылка" ) Тогда
		открытьДокумент ( ВыбраннаяСтрока );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура открытьДокумент ( Идентификатор )
	
	строкаТЧ = Объект.Таблица.НайтиПоИдентификатору ( Идентификатор );
	Если ( строкаТЧ <> Неопределено ) Тогда
		ПоказатьЗначение ( , строкаТЧ.Ссылка );
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаПриОкончанииРедактирования ( Элемент, НоваяСтрока, ОтменаРедактирования )
	
	// код ... 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура заполнитьДокумент ( Ссылка, Реквизиты )
	
	докОбъект = Ссылка.ПолучитьОбъект ();
	Для Каждого реквизит Из Реквизиты Цикл
		докОбъект [ реквизит.Ключ ] = реквизит.Значение;  	
	КонецЦикла;
	докОбъект.Записать ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления ( Элемент, Отказ, Копирование, Родитель, Группа, Параметр )
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередУдалением ( Элемент, Отказ )
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура записатьРегистрПорядокКонтроль ()
	
	набор = РегистрыСведений.ПорядокДокументовКонтроль.СоздатьНаборЗаписей ();
	набор.Отбор.Пользователь.Установить ( ПараметрыСеанса.ТекущийПользователь );
	набор.Прочитать ();
	набор.Очистить ();
	т = Объект.Таблица.Выгрузить ( , "НомерСтроки, Ссылка" );
	Для Каждого строкаТЗ Из т Цикл
		запись = набор.Добавить ();
		запись.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		запись.ПорядокСортировки = строкаТЗ.НомерСтроки;
		запись.Ссылка = строкаТЗ.Ссылка;
	КонецЦикла; 
	набор.Записать ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКолонки ( Элемент )
	
	данные = Элементы.Таблица.ТекущиеДанные;
	Если ( данные <> Неопределено ) Тогда
		п = Новый Структура ();
		п.Вставить ( "Транспорт", данные.Транспорт );
		п.Вставить ( "Контрагент", данные.Контрагент );
		п.Вставить ( "Порт", данные.Порт );
		п.Вставить ( "Комментарий", данные.Комментарий );
		п.Вставить ( "Вес", данные.Вес );
		п.Вставить ( "ВесПеревес", данные.ВесПеревес );
		п.Вставить ( "ВесПЛ", данные.ВесПЛ );
		п.Вставить ( "ДатаПолучения", данные.ДатаПолучения );
		п.Вставить ( "ДатаПрихода", данные.ДатаПрихода );
		п.Вставить ( "ДатаРасчета", данные.ДатаРасчета );
		п.Вставить ( "Линия", данные.Линия );
		п.Вставить ( "Номенклатура", данные.Номенклатура );
		п.Вставить ( "Организация", данные.Организация );
		п.Вставить ( "ПакингЛист", данные.ПакингЛист );
		п.Вставить ( "ПортВыгрузка", данные.ПортВыгрузка );
		п.Вставить ( "СтранаОтправления", данные.СтранаОтправления );
		п.Вставить ( "Сумма", данные.Сумма );
		п.Вставить ( "Экспедитор", данные.Экспедитор );
		заполнитьДокумент ( данные.Ссылка, п );	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПередЗакрытием ( Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка )
	
	Если ( ЗавершениеРаботы ) Тогда
		ТекстПредупреждения = " ";
		Отказ = Истина;
	ИначеЕсли ( ЗакрытиеРазрешено = Неопределено ) Тогда
		Отказ = Истина;
		движенияПередЗакрытием ();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура движенияПередЗакрытием ()
	
	записатьРегистрПорядокКонтроль ();
	ПоказатьВопрос ( Новый ОписаниеОповещения ( "ВопросПередЗакрытием", ЭтотОбъект ), "Закрыть форму?", РежимДиалогаВопрос.ДаНет, ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытием ( Ответ, Парам ) Экспорт
	
	Если ( Ответ = КодВозвратаДиалога.Да ) Тогда
		закрытьФорму ();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура закрытьФорму ()
	
	ЗакрытиеРазрешено = Истина;
	Закрыть ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЕксель ( Команда )
	
	п = Новый Структура (); 
	ОткрытьФорму ( "ОбщаяФорма.БуферОбменаИзExcel", , ЭтаФорма, , , , Новый ОписаниеОповещения ( "ВыборИзЕксель", ЭтотОбъект, п ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзЕксель ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли; 
	заполнитьПоБуферуОбмена ( Ответ, Парамы );	
	
КонецПроцедуры

&НаКлиенте
Процедура заполнитьПоБуферуОбмена ( Буфер, Парамы )
	
	текст = Новый ТекстовыйДокумент ();
	текст.УстановитьТекст ( Буфер );
	количествоСтрок = Текст.КоличествоСтрок ();
	счетчик = 1;
	м = Новый Массив ();
 	Пока счетчик <= количествоСтрок Цикл
		текущаяСтрока = Текст.ПолучитьСтроку ( счетчик );
		Если ( текущаяСтрока <> "" ) Тогда
			данные = СтрРазделить ( текущаяСтрока, Символы.Таб );
			п = Новый Структура ();
			п.Вставить ( "Номенклатура", СокрЛП ( данные [ 1 ] ) );
			п.Вставить ( "СтранаОтправления", СокрЛП ( данные [ 2 ] ) );
			п.Вставить ( "Порт", СокрЛП ( данные [ 3 ] ) );
			п.Вставить ( "Организация", СокрЛП ( данные [ 4 ] ) );
			п.Вставить ( "Транспорт", СокрЛП ( данные [ 5 ] ) );
			п.Вставить ( "Вес", СокрЛП ( данные [ 6 ] ) );
			п.Вставить ( "ВесПЛ", СокрЛП ( данные [ 7 ] ) );
			п.Вставить ( "ВесПеревес", СокрЛП ( данные [ 8 ] ) );
			п.Вставить ( "Сумма", СокрЛП ( данные [ 9 ] ) );
			п.Вставить ( "ПакингЛист", СокрЛП ( данные [ 10 ] ) );
			п.Вставить ( "Линия", СокрЛП ( данные [ 11 ] ) );
			п.Вставить ( "ПортВыгрузка", СокрЛП ( данные [ 12 ] ) );
			п.Вставить ( "Контрагент", СокрЛП ( данные [ 13 ] ) );
			п.Вставить ( "ДатаПолучения", СокрЛП ( данные [ 14 ] ) );
			п.Вставить ( "ДатаПрихода", СокрЛП ( данные [ 15 ] ) );
			п.Вставить ( "Экспедитор", СокрЛП ( данные [ 16 ] ) );
			п.Вставить ( "ДатаРасчета", СокрЛП ( данные [ 17 ] ) );
			п.Вставить ( "Комментарий", СокрЛП ( данные [ 18 ] ) );
			м.Добавить ( п )
		КонецЕсли; 
		счетчик = счетчик + 1;
	КонецЦикла;
	создатьДокументыПоExcel ( м );
	
КонецПроцедуры

&НаКлиенте
Процедура создатьДокументыПоExcel ( Данные )
	
	колво = Данные.Количество ();
	Если ( колво > 0 ) Тогда
		п = Новый Структура ();
		п.Вставить ( "Данные", Данные );
		с = "Будет создано " + колво + " документов. Продолжить?";
		ПоказатьВопрос ( Новый ОписаниеОповещения ( "ВопросСоздатьДокументы", ЭтотОбъект, п ), с, РежимДиалогаВопрос.ДаНет );
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьДокументы ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = КодВозвратаДиалога.Нет ) Тогда
		Возврат;
	Иначе
		создатьДокументПоExcelСервер ( Парамы.Данные );
	обновитьФорму (); 
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура создатьДокументПоExcelСервер ( Данные )
	
	карты = получитьДанныеСправочников  ();
	валюта = Константы.ВалютаУчета.Получить ();
	организация = Константы.ОсновнаяОрганизация.Получить ();
	ответственный = ПараметрыСеанса.ТекущийПользователь;
	счетчик = 0;
	Для Каждого п Из Данные Цикл
		док = Документы.Контроль.СоздатьДокумент ();
		док.Дата = ТекущаяДатаСеанса ();
		док.Организация = организация;
		док.Валюта = валюта;
		док.Ответственный = ответственный;
		док.Номенклатура = получитьСсылкуПоТексту  ( карты.Номенклатура, п.Номенклатура, "Номенклатура" );
		док.СтранаОтправления = получитьСсылкуПоТексту  ( карты.Страны, п.СтранаОтправления, "Страны" );
		док.Порт = получитьСсылкуПоТексту  ( карты.Порты, п.Порт, "Порты" );
		док.Организация = получитьСсылкуПоТексту  ( карты.Организации, п.Организация, "Организации" );
		док.Транспорт = п.Транспорт;
		док.Вес = получитьЧисло ( п.Вес );
		док.ВесПЛ = получитьЧисло ( п.ВесПЛ );
		док.ВесПеревес = получитьЧисло ( п.ВесПеревес );
		док.Сумма = получитьЧисло ( п.Сумма );
		док.ПакингЛист = п.ПакингЛист;
		док.Линия = получитьСсылкуПоТексту  ( карты.Линия, п.Линия, "Линия" );
		док.ПортВыгрузка = получитьСсылкуПоТексту  ( карты.Порты, п.ПортВыгрузка, "Порты" );
		док.Контрагент = получитьСсылкуПоТексту  ( карты.Контрагенты, п.Контрагент, "Контрагенты" );
		док.ДатаПолучения = получитьДату ( п.ДатаПолучения );
		док.ДатаПрихода = получитьДату ( п.ДатаПрихода );
		док.Экспедитор = получитьСсылкуПоТексту  ( карты.Контрагенты, п.Экспедитор, "Контрагенты" );
		док.ДатаРасчета = получитьДату ( п.ДатаРасчета );
		док.Комментарий = п.Комментарий;
		док.Записать ();
		счетчик = счетчик + 1;		
	КонецЦикла; 
	Сообщить ( "Создано " + счетчик + " документов!", СтатусСообщения.Обычное );
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьДату ( Текст ) 
	
	Если ( Текст = "" ) Тогда
		Возврат Дата ( 1, 1, 1 );
	Иначе
		д = Лев( Текст, 2);
		м = Сред( Текст, 4, 2);
		г = "20" + Прав( Текст, 2);
		Возврат Дата( г + м + д + "000000");	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция получитьЧисло ( Текст )
	
	Если ( Текст = "" ) Тогда
		ч = 0;
	Иначе
		ч = Число ( СтрЗаменить ( Текст, " ", "" ) );
	КонецЕсли;
	Возврат ч;
	
КонецФункции

&НаСервереБезКонтекста
Функция получитьСсылкуПоТексту ( Карта, Наименование, ИмяСправочника )
	
	имя = НРег ( Наименование );
	ссылка = Карта [ имя ];
	Если ( ссылка = Неопределено ) Тогда
		ссылка = создатьЭлементСправочника  ( Наименование, ИмяСправочника );
		Карта.Вставить ( имя, ссылка );		
	КонецЕсли;
	Возврат ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция создатьЭлементСправочника ( Наименование, ИмяСправочника )
	
	спр = Справочники [ ИмяСправочника ].СоздатьЭлемент ();
	спр.Наименование = Наименование;
	спр.Записать ();
	Возврат спр.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция получитьДанныеСправочников ()
	
	с = "
	|выбрать
	|	Ссылка как Ссылка,
	|	Наименование как Наименование
	|из
	|	Справочник.Номенклатура
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	Наименование как Наименование
	|из
	|	Справочник.Страны
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	Наименование как Наименование
	|из
	|	Справочник.Порты
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	Наименование как Наименование
	|из
	|	Справочник.Организации
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	Наименование как Наименование
	|из
	|	Справочник.Линия
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	Наименование как Наименование
	|из
	|	Справочник.Контрагенты
	|";
	запрос = Новый Запрос ( с );
	результат = запрос.ВыполнитьПакет ();
	п = Новый Структура ();
	п.Вставить ( "Номенклатура", получитьКартуСправочника ( результат [ 0 ] ) );
	п.Вставить ( "Страны", получитьКартуСправочника ( результат [ 1 ] ) );
	п.Вставить ( "Порты", получитьКартуСправочника  ( результат [ 2 ] ) );
	п.Вставить ( "Организации", получитьКартуСправочника ( результат [ 3 ] ) );
	п.Вставить ( "Линия", получитьКартуСправочника ( результат [ 4 ] ) );
	п.Вставить ( "Контрагенты", получитьКартуСправочника ( результат [ 5 ] ) );
	Возврат п;

КонецФункции

&НаСервереБезКонтекста
Функция получитьКартуСправочника ( Данные )
	
	выборка = Данные.Выбрать ();
	карта = Новый Соответствие ();
	Пока ( выборка.Следующий () ) Цикл
		наименование = НРег ( СокрЛП ( выборка.Наименование ) );
		карта.Вставить ( наименование, выборка.Ссылка );	
	КонецЦикла;
	Возврат карта;
	
КонецФункции