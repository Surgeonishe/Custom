
&НаСервере
Процедура ПриСозданииНаСервере ( Отказ, СтандартнаяОбработка )
	
	начальноеЗаполнение ();
	
КонецПроцедуры

&НаСервере
Процедура начальноеЗаполнение ()
	
	Объект.ДатаНачала = НачалоДня ( ТекущаяДата () );
	Объект.ДатаОкончания = КонецДня ( ТекущаяДата () );
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;
	Если ( РольДоступна ( "Кассир" ) И НЕ РольДоступна ( "Директор" ) ) Тогда
		Объект.Касса = ПараметрыСеанса.ТекущийПользователь.ОсновнаяКасса;
		Элементы.Касса.ТолькоПросмотр = Истина;
		Элементы.ДатаНачала.Доступность = Истина;
		Элементы.ДатаОкончания.Доступность = Истина;
	Иначе
		Объект.Касса = Константы.ОсновнаяКасса.Получить ();		
	КонецЕсли; 
	Объект.Организация = Константы.ОсновнаяОрганизация.Получить ();
	Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь; 
	приИзмененииПериода ();
	Объект.Год = НачалоГода ( ТекущаяДата () );  
	
КонецПроцедуры 

&НаКлиенте
Процедура ПериодПриИзменении ( Элемент )
	
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания; 
	приИзмененииПериода ();
	
КонецПроцедуры

&НаСервере
Процедура приИзмененииПериода ()
	
	обновитьДанныеСервер ();
	
КонецПроцедуры

&НаСервере
Процедура заполнитьОстатки ()
	
	Объект.Остатки.Очистить ();
	новая = Объект.Остатки.Добавить ();
	новая.Описание = "на начало (" + Формат ( Период.ДатаНачала, "ДФ=dd.MM.yyyy" ) + ")";;
	строкаТЧ = Объект.Остатки [ 0 ];
	данные = получитьОстатокПоКассе ( НачалоДня ( Объект.ДатаНачала ), Объект.Касса );
	ЗаполнитьЗначенияСвойств ( строкаТЧ, данные ); 
	новая = Объект.Остатки.Добавить ();
	новая.Описание = "приход";
	заполнитьПоТаблице ( 1, "Приход" );
	новая = Объект.Остатки.Добавить ();
	новая.Описание = "расход";
	заполнитьПоТаблице ( 2, "Расход" );
	новая = Объект.Остатки.Добавить ();
	новая.Описание = "на конец (" + Формат ( Период.ДатаОкончания, "ДФ=dd.MM.yyyy" ) + ")";
	рассчитатьОстаткиНаКонец ();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьОстатокПоКассе ( НаДату, Касса  )
	
	с = "
	|выбрать
	|	Валюта как Валюта,
	|	СуммаОстаток как Сумма
	|из
	|	РегистрНакопления.ДенежныеСредства.Остатки ( &НаДату, Казна = &Касса )
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "НаДату", НаДату );
	запрос.УстановитьПараметр ( "Касса", Касса );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	п = Новый Структура ( "СуммаДоллар, СуммаГривна, СуммаЕвро", 0, 0, 0 );
	Пока ( выборка.Следующий () ) Цикл
		Если ( выборка.Валюта = Справочники.Валюты.Доллар ) Тогда
			п.СуммаДоллар = выборка.Сумма;
		ИначеЕсли ( выборка.Валюта = Справочники.Валюты.Гривна ) Тогда
			п.СуммаГривна = выборка.Сумма;
		ИначеЕсли ( выборка.Валюта = Справочники.Валюты.Евро ) Тогда
			п.СуммаЕвро = выборка.Сумма;
		КонецЕсли; 	
	КонецЦикла;
	Возврат п;
	
КонецФункции

&НаСервере
Процедура заполнитьПоТаблице ( Индекс, Имя )
	
	данные = Объект.Остатки [ Индекс ];
	Для Каждого строкаТЧ Из Объект [ Имя ] Цикл
		суффикс = "";
		Если ( строкаТЧ.Статус = 0 ) Тогда // выполнено
			суффикс = "";
		ИначеЕсли ( строкаТЧ.Статус = 1 ) Тогда 
			суффикс = "Отменен";
		ИначеЕсли ( строкаТЧ.Статус = 2 ) Тогда 
			суффикс = "План";
		КонецЕсли;
		данные [ "СуммаДоллар" + суффикс ] = данные [ "СуммаДоллар" + суффикс ] + строкаТЧ.СуммаДоллар;  
		данные [ "СуммаГривна" + суффикс ] = данные [ "СуммаГривна" + суффикс ] + строкаТЧ.СуммаГривна;
		данные [ "СуммаЕвро" + суффикс ] = данные [ "СуммаЕвро" + суффикс ] + строкаТЧ.СуммаЕвро;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура рассчитатьОстаткиНаКонец ()
	
	т = Объект.Остатки;
	строкаОстатки = т [ 3 ];
	строкаОстатки.СуммаДоллар = т [ 0 ].СуммаДоллар + т [ 1 ].СуммаДоллар - т [ 2 ].СуммаДоллар;    
	строкаОстатки.СуммаГривна = т [ 0 ].СуммаГривна + т [ 1 ].СуммаГривна - т [ 2 ].СуммаГривна;    	
	строкаОстатки.СуммаЕвро = т [ 0 ].СуммаЕвро + т [ 1 ].СуммаЕвро - т [ 2 ].СуммаЕвро;    
	
КонецПроцедуры 

&НаКлиенте
Процедура КассаПриИзменении ( Элемент )
	
	приИзмененииПериода ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходПриИзменении ( Элемент )
	
	заполнитьДокумент ( "Приход", Элементы.Приход.ТекущаяСтрока );
	заполнитьОстатки ();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходПриИзменении ( Элемент )
	
	заполнитьДокумент ( "Расход", Элементы.Расход.ТекущаяСтрока );
	заполнитьОстатки ();
	
КонецПроцедуры

&НаКлиенте
Процедура заполнитьДокумент ( Имя, Идентификатор )
	
	строкаТЧ = Объект [ Имя ].НайтиПоИдентификатору ( Идентификатор );
	Если ( СтрокаТЧ.СуммаДоллар <> 0 ИЛИ СтрокаТЧ.СуммаЕвро <> 0 ИЛИ СтрокаТЧ.СуммаГривна <> 0 ) Тогда
		п = получитьПараметры ( СтрокаТЧ );
		п.Вставить ( "Имя", Имя );
		заполнитьДокументСервер ( п );
		СтрокаТЧ.Ссылка = п.Ссылка;
		СтрокаТЧ.Номер = п.Номер;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция получитьПараметры ( СтрокаТЧ )
	
	п = Новый Структура ();
	п.Вставить ( "Дата", СтрокаТЧ.Дата );
	п.Вставить ( "Номер", СтрокаТЧ.Номер );
	п.Вставить ( "Контрагент", СтрокаТЧ.Контрагент );
	оплаты = Новый Соответствие ();
	Если ( СтрокаТЧ.СуммаДоллар <> 0 ) Тогда
		п.Вставить ( "Валюта", ПредопределенноеЗначение ( "Справочник.Валюты.Доллар" ) );
		п.Вставить ( "Сумма", СтрокаТЧ.СуммаДоллар );
		оплаты.Вставить ( ПредопределенноеЗначение ( "Справочник.Валюты.Доллар" ), СтрокаТЧ.СуммаДоллар );
	ИначеЕсли ( СтрокаТЧ.СуммаЕвро <> 0 ) Тогда
		п.Вставить ( "Валюта", ПредопределенноеЗначение ( "Справочник.Валюты.Евро" ) );
		п.Вставить ( "Сумма", СтрокаТЧ.СуммаЕвро );
		оплаты.Вставить ( ПредопределенноеЗначение ( "Справочник.Валюты.Евро" ), СтрокаТЧ.СуммаЕвро );
	ИначеЕсли ( СтрокаТЧ.СуммаГривна <> 0 ) Тогда
		п.Вставить ( "Валюта", ПредопределенноеЗначение ( "Справочник.Валюты.Гривна" ) );
		п.Вставить ( "Сумма", СтрокаТЧ.СуммаГривна );
		оплаты.Вставить ( ПредопределенноеЗначение ( "Справочник.Валюты.Гривна" ), СтрокаТЧ.СуммаГривна );
	КонецЕсли;
	п.Вставить ( "Оплаты", оплаты );
	п.Вставить ( "Касса", Объект.Касса );
	п.Вставить ( "Организация", Объект.Организация );
	п.Вставить ( "Статус", СтрокаТЧ.Статус );
	п.Вставить ( "Ссылка", СтрокаТЧ.Ссылка );
	п.Вставить ( "СтатьяДДС", СтрокаТЧ.СтатьяДДС );
	п.Вставить ( "ВидОперации", СтрокаТЧ.ВидОперации );
	п.Вставить ( "Курс", СтрокаТЧ.Курс );
	Возврат п;

КонецФункции

&НаСервереБезКонтекста
Процедура заполнитьДокументСервер ( Данные )
	
	Если ( Данные.Имя = "Приход" ) Тогда
		имяДокумента = "ПриходныйКассовыйОрдер";
	ИначеЕсли ( Данные.Имя = "Расход" ) Тогда
		имяДокумента = "РасходныйКассовыйОрдер";
	КонецЕсли; 
	Если ( ЗначениеЗаполнено ( Данные.Ссылка ) ) Тогда
		док = Данные.Ссылка.ПолучитьОбъект ();
	Иначе
		док = Документы [ имяДокумента ].СоздатьДокумент ();
		док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		Если ( Данные.Имя = "Приход" ) Тогда
			док.ВидОперации = Перечисления.ВидОперацииПриходныйКассовыйОрдер.ОплатаКлиента;
		ИначеЕсли ( Данные.Имя = "Расход" ) Тогда
			док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.Оплата;
		КонецЕсли; 
	КонецЕсли;
	док.Дата = Данные.Дата;
	док.Номер = Данные.Номер;
	док.ВидОперации = Данные.ВидОперации;
	док.ДатаОперации = Данные.Дата;
	док.Касса = Данные.Касса;
	док.Контрагент = Данные.Контрагент;
	док.Сумма = Данные.Сумма;
	док.Валюта = Данные.Валюта;
	док.Курс = Данные.Курс;
	док.СтатьяДДС = Данные.СтатьяДДС;
	док.Организация = Данные.Организация;
	оплаты = док.Оплаты;
	Для Каждого оплата Из Данные.Оплаты Цикл
		поиск = Новый Структура ( "Валюта", оплата.Ключ );
		строкаОплата = док.Оплаты.НайтиСтроки ( поиск );
		Если ( строкаОплата.Количество () > 0 ) Тогда
			строкаТЧ = строкаОплата [ 0 ];
		Иначе
			строкаТЧ = док.Оплаты.Добавить ();
			строкаТЧ.Валюта = оплата.Ключ;
		КонецЕсли; 
		строкаТЧ.Сумма = оплата.Значение;		
	КонецЦикла; 
	Если ( Данные.Статус = 0 ) Тогда // проведен
		док.ПометкаУдаления = Ложь;
		док.Записать ( РежимЗаписиДокумента.Проведение );
	ИначеЕсли ( Данные.Статус = 1 ) Тогда // помечен на удаление
		док.ПометкаУдаления = Истина;
		док.Записать ( РежимЗаписиДокумента.ОтменаПроведения );
	ИначеЕсли ( Данные.Статус = 2 ) Тогда 
		Если ( док.Проведен ) Тогда
			режим = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			режим = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		док.ПометкаУдаления = Ложь;
		док.Записать ( режим );
	КонецЕсли;	
	Данные.Номер = док.Номер;
	Данные.Ссылка = док.Ссылка;
	
КонецПроцедуры 

&НаКлиенте
Процедура СтатусВыполнено ( Команда )
	
	установитьСтатусСтроки ( ТекущийЭлемент.Имя, 0 );	
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтменен ( Команда )
	
	установитьСтатусСтроки ( ТекущийЭлемент.Имя, 1 );
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПлан ( Команда )
	
	установитьСтатусСтроки ( ТекущийЭлемент.Имя, 2 );	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходПриНачалеРедактирования ( Элемент, НоваяСтрока, Копирование )
	
	Если ( НоваяСтрока ) Тогда
		установитьСтатусСтроки ( "Приход", 2 );
		установитьДату ( "Приход" );
		установитьВидОперации ( "Приход" );
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РасходПриНачалеРедактирования ( Элемент, НоваяСтрока, Копирование )
	
	Если ( НоваяСтрока ) Тогда
		установитьСтатусСтроки ( "Расход", 2 );
		установитьДату ( "Расход" );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура установитьСтатусСтроки ( Имя, Статус )
	
	Если ( Имя = "Приход" ИЛИ Имя = "Расход" ) Тогда
		Если ( Элементы [ Имя ].ВыделенныеСтроки.Количество () > 0 ) Тогда
			Для Каждого идентификатор Из Элементы [ Имя ].ВыделенныеСтроки Цикл
				данные = Объект [ Имя ].НайтиПоИдентификатору ( идентификатор );   
				данные.Статус = Статус;
				заполнитьДокумент ( Имя, идентификатор );
			КонецЦикла; 	
		КонецЕсли;
		заполнитьОстатки ();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура установитьДату ( Имя )
	
	строкаТЧ = Объект [ Имя ].НайтиПоИдентификатору ( Элементы [ Имя ].ТекущаяСтрока );
	Если ( строкаТЧ <> Неопределено ) Тогда
		строкаТЧ.Дата = НачалоДня ( Период.ДатаОкончания );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура установитьВидОперации ( Имя )
	
	строкаТЧ = Объект [ Имя ].НайтиПоИдентификатору ( Элементы [ Имя ].ТекущаяСтрока );
	Если ( строкаТЧ <> Неопределено ) Тогда
		Если ( Имя = "Приход" ) Тогда
			строкаТЧ.ВидОперации = ПредопределенноеЗначение ( "Перечисление.ВидОперацииПриходныйКассовыйОрдер.ОплатаКлиента" );
		ИначеЕсли ( Имя = "Расход" ) Тогда
			строкаТЧ.ВидОперации = ПредопределенноеЗначение ( "Перечисление.ВидОперацииРасходныйКассовыйОрдер.Оплата" );
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент ( Команда )
	
	имя = ТекущийЭлемент.Имя;
	идентификатор = Элементы [ имя ].ТекущаяСтрока;
	строкаТЧ = Объект [ имя ].НайтиПоИдентификатору ( идентификатор );
	Если ( строкаТЧ <> Неопределено И ЗначениеЗаполнено ( строкаТЧ.Ссылка ) ) Тогда
		ПоказатьЗначение ( , строкаТЧ.Ссылка );
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура заполнитьТаблицы ()
	
	с = "
	|выбрать
	|	Дата как Дата, 
	|	Комментарий как Комментарий, 
	|	Контрагент как Контрагент, 
	|	НазначениеПлатежа как НазначениеПлатежа, 
	|	Номер как Номер, 
	|	Ссылка как Ссылка, 
	|	выбор
	|		когда ПометкаУдаления 
	|			тогда 1
	|		когда Проведен
	|			тогда 0
	|		иначе
	|			2
	|	конец как Статус,
	|	СтатьяДДС как СтатьяДДС,
	|	ВидОперации как ВидОперации
	|поместить ВТПКО 
	|из
	|	Документ.ПриходныйКассовыйОрдер
	|где
	|	Дата между &ДатаНачала и &ДатаОкончания
	|	и Касса = &Касса  
	|;
	|выбрать
	|	Дата как Дата, 
	|	Комментарий как Комментарий, 
	|	Контрагент как Контрагент, 
	|	НазначениеПлатежа как НазначениеПлатежа, 
	|	Номер как Номер, 
	|	Ссылка как Ссылка, 
	|	выбор
	|		когда ПометкаУдаления 
	|			тогда 1
	|		когда Проведен
	|			тогда 0
	|		иначе
	|			2
	|	конец как Статус,
	|	СтатьяДДС как СтатьяДДС,
	|	ВидОперации как ВидОперации
 	|поместить ВТРКО 
	|из
	|	Документ.РасходныйКассовыйОрдер
	|где
	|	Дата между &ДатаНачала и &ДатаОкончания
	|	и Касса = &Касса
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	сумма ( 
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Гривна )
	|					тогда Сумма
	|				иначе
	|			0
	|			конец ) как СуммаГривна,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Доллар )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаДоллар,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Евро )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаЕвро
	|поместить ВТПКООплаты
	|из
	|	Документ.ПриходныйКассовыйОрдер.Оплаты
	|где
	|	Ссылка в ( выбрать Ссылка из ВТПКО )
	|сгруппировать по
	|	Ссылка
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	сумма ( 
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Гривна )
	|					тогда Сумма
	|				иначе
	|			0
	|			конец ) как СуммаГривна,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Доллар )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаДоллар,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Евро )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаЕвро
	|поместить ВТРКООплаты
	|из
	|	Документ.РасходныйКассовыйОрдер.Оплаты
	|где
	|	Ссылка в ( выбрать Ссылка из ВТРКО )
	|сгруппировать по
	|	Ссылка
	|;
	|выбрать
	|	ВТПКО.Дата как Дата, 
	|	ВТПКО.Комментарий как Комментарий, 
	|	ВТПКО.Контрагент как Контрагент, 
	|	ВТПКО.НазначениеПлатежа как НазначениеПлатежа, 
	|	ВТПКО.Номер как Номер, 
	|	ВТПКО.Ссылка как Ссылка, 
	|	ВТПКО.Статус как Статус,
	|	ВТПКО.СтатьяДДС как СтатьяДДС,
	|	ВТПКО.ВидОперации как ВидОперации,
	|	естьnull ( ВТПКООплаты.СуммаГривна, 0 ) как СуммаГривна,
	|	естьnull ( ВТПКООплаты.СуммаДоллар, 0 ) как СуммаДоллар,
	|	естьnull ( ВТПКООплаты.СуммаЕвро, 0 ) как СуммаЕвро,
	|	выбор
	|		когда ВТПКО.Комментарий = """"
	|			тогда """"
 	|		иначе
	|			""+""
	|	конец как КомментарийЗаполнен
	|из
	|	ВТПКО как ВТПКО
	|	левое соединение ВТПКООплаты как ВТПКООплаты
	|	по ВТПКО.Ссылка = ВТПКООплаты.Ссылка
	|упорядочить по
	|	ВТПКО.Номер возр
	|;
	|выбрать
	|	ВТРКО.Дата как Дата, 
	|	ВТРКО.Комментарий как Комментарий, 
	|	ВТРКО.Контрагент как Контрагент, 
	|	ВТРКО.НазначениеПлатежа как НазначениеПлатежа, 
	|	ВТРКО.Номер как Номер, 
	|	ВТРКО.Ссылка как Ссылка, 
	|	ВТРКО.Статус как Статус,
	|	ВТРКО.СтатьяДДС как СтатьяДДС,
	|	ВТРКО.ВидОперации как ВидОперации,
	|	естьnull ( ВТРКООплаты.СуммаГривна, 0 ) как СуммаГривна,
	|	естьnull ( ВТРКООплаты.СуммаДоллар, 0 ) как СуммаДоллар,
	|	естьnull ( ВТРКООплаты.СуммаЕвро, 0 ) как СуммаЕвро,
	|	выбор
	|		когда ВТРКО.Комментарий = """"
	|			тогда """"
 	|		иначе
	|			""+""
	|	конец как КомментарийЗаполнен
	|из
	|	ВТРКО как ВТРКО
	|	левое соединение ВТРКООплаты как ВТРКООплаты
	|	по ВТРКО.Ссылка = ВТРКООплаты.Ссылка
	|упорядочить по
	|	ВТРКО.Номер возр
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "ДатаНачала", Объект.ДатаНачала );
	запрос.УстановитьПараметр ( "ДатаОкончания", Объект.ДатаОкончания );
	запрос.УстановитьПараметр ( "Касса", Объект.Касса );
	результат = запрос.ВыполнитьПакет ();
	Объект.Приход.Загрузить ( результат [ 4 ].Выгрузить () );    
	Объект.Расход.Загрузить ( результат [ 5 ].Выгрузить () ); 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДатаФильтрПриИзменении ( Элемент )
	
	установитьФильтрыТаблиц ();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентФильтрПриИзменении ( Элемент )
	
	установитьФильтрыТаблиц ();
	установитьОформлениеПоля ( "КонтрагентФильтр" );
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСФильтрПриИзменении ( Элемент )
	
	установитьФильтрыТаблиц ();
	установитьОформлениеПоля ( "СтатьяДДСФильтр" );
	
КонецПроцедуры

&НаКлиенте
Процедура установитьФильтрыТаблиц ()
	
	Если ( ЗначениеЗаполнено ( Объект.ДатаФильтр )
		ИЛИ ЗначениеЗаполнено ( Объект.КонтрагентФильтр )
		ИЛИ ЗначениеЗаполнено ( Объект.СтатьяДДСФильтр ) ) Тогда
		п = Новый Структура ();
		Если ( ЗначениеЗаполнено ( Объект.ДатаФильтр ) ) Тогда
			п.Вставить ( "Дата", Объект.ДатаФильтр ); 
		КонецЕсли;
		Если ( ЗначениеЗаполнено ( Объект.КонтрагентФильтр ) ) Тогда
			п.Вставить ( "Контрагент", Объект.КонтрагентФильтр ); 
		КонецЕсли;
		Если ( ЗначениеЗаполнено ( Объект.СтатьяДДСФильтр ) ) Тогда
			п.Вставить ( "СтатьяДДС", Объект.СтатьяДДСФильтр ); 
		КонецЕсли;
		фильтр = Новый ФиксированнаяСтруктура ( п );
	Иначе
		фильтр = Неопределено; 
	КонецЕсли;
	Элементы.Приход.ОтборСтрок = фильтр;
	Элементы.Расход.ОтборСтрок = фильтр;
	
КонецПроцедуры

&НаКлиенте
Процедура установитьОформлениеПоля ( Имя )
	
	Если ( ЗначениеЗаполнено ( Объект [ Имя ] ) ) Тогда
		Элементы [ Имя ].ЦветФона = WebЦвета.Розовый;
	Иначе
		Элементы [ Имя ].ЦветФона = Новый Цвет ();
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьКонвертацию ( Команда )
	
	ОткрытьФорму ( "Обработка.Кассир.Форма.Конвертация", , ЭтаФорма, , , , Новый ОписаниеОповещения ( "КонвертацияЗавершение", ЭтотОбъект ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертацияЗавершение ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	создатьДокументКонвертация ( ответ, "Приход" );
	создатьДокументКонвертация ( ответ, "Расход" );
	индекс = Объект.Приход.Количество () - 1;
	пко = Объект.Приход [ индекс ].Ссылка;
	индекс = Объект.Расход.Количество () - 1; 
	рко = Объект.Расход [ индекс ].Ссылка;
	заполнитьПКОвРКО ( пко, рко );
	заполнитьОстатки ();	
	
КонецПроцедуры

&НаКлиенте
Процедура создатьДокументКонвертация ( Данные, Имя )
	
	новая = Объект [ Имя ].Добавить ();
	новая.Дата = НачалоДня ( Период.ДатаОкончания );
	новая.Статус = 0;
	новая.Курс = Данные.Курс;
	новая.СтатьяДДС = ПредопределенноеЗначение ( "Справочник.СтатьяДДС.Конвертация" );
	валюта = Данные [ "Валюта" + Имя ];
	сумма = Данные [ "Сумма" + Имя ];  
	Если ( валюта = ПредопределенноеЗначение ( "Справочник.Валюты.Гривна" ) ) Тогда
		новая.СуммаГривна = сумма;
	ИначеЕсли ( валюта = ПредопределенноеЗначение ( "Справочник.Валюты.Доллар" ) ) Тогда
		новая.СуммаДоллар = сумма;
	ИначеЕсли ( валюта = ПредопределенноеЗначение ( "Справочник.Валюты.Евро" ) ) Тогда
		новая.СуммаЕвро = сумма;
	КонецЕсли;
	Если ( Имя = "Приход" ) Тогда
		новая.ВидОперации = ПредопределенноеЗначение ( "Перечисление.ВидОперацииПриходныйКассовыйОрдер.Конвертация" );
	ИначеЕсли ( Имя = "Расход" ) Тогда 
		новая.ВидОперации = ПредопределенноеЗначение ( "Перечисление.ВидОперацииРасходныйКассовыйОрдер.Конвертация" );
	КонецЕсли; 
	заполнитьДокумент ( Имя, новая.ПолучитьИдентификатор () );
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура заполнитьПКОвРКО ( ПКО, РКО )
	
	Если ( ЗначениеЗаполнено ( ПКО ) И ЗначениеЗаполнено ( РКО ) ) Тогда
		ркоОбъект = РКО.ПолучитьОбъект ();
		ркоОбъект.ДокументПКО = ПКО;
		ркоОбъект.Записать ();
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьМультивалютныйДокументПриход ( Команда )
	
	п = Новый Структура ( "Имя", "Приход" );
	ОткрытьФорму ( "Обработка.Кассир.Форма.МультивалютныйДокумент", , ЭтаФорма, , , , Новый ОписаниеОповещения ( "МультивалютныйДокументЗавершение", ЭтотОбъект, п ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМультивалютныйДокументРасход ( Команда )
	
	п = Новый Структура ( "Имя", "Расход" );
	ОткрытьФорму ( "Обработка.Кассир.Форма.МультивалютныйДокумент", , ЭтаФорма, , , , Новый ОписаниеОповещения ( "МультивалютныйДокументЗавершение", ЭтотОбъект, п ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
	
КонецПроцедуры

&НаКлиенте
Процедура МультивалютныйДокументЗавершение ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	имя = Парамы.Имя;
	Ответ.Вставить ( "Дата", НачалоДня ( Период.ДатаОкончания ) );
	Ответ.Вставить ( "Касса", Объект.Касса );
	Ответ.Вставить ( "Организация", Объект.Организация );
	п = создатьМультивалютныйДокумент ( ответ, имя );
	новая = Объект [ Имя ].Добавить ();
	ЗаполнитьЗначенияСвойств ( новая, п );
	заполнитьОстатки ();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция создатьМультивалютныйДокумент ( Данные, Имя )
	
	Если ( Имя = "Приход" ) Тогда
		док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент ();
		док.ВидОперации = Перечисления.ВидОперацииПриходныйКассовыйОрдер.ОплатаКлиента;
		док.СчетНаОплату = Данные.СчетНаОплату;
	ИначеЕсли ( Имя = "Расход" ) Тогда
		док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент ();
		док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.Оплата;
	КонецЕсли; 
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	док.Дата = Данные.Дата;
	док.ДатаОперации = Данные.Дата;
	док.Касса = Данные.Касса;
	док.Контрагент = Данные.Контрагент;
	док.Сумма = Данные.Сумма;
	док.Валюта = Данные.Валюта;
	док.СтатьяДДС = Данные.СтатьяДДС;
	док.Организация = Данные.Организация;
	док.ДолгПоВалютам = Данные.ДолгПоВалютам;
	Для Каждого п Из Данные.Оплаты Цикл
		новая = док.Оплаты.Добавить ();
		ЗаполнитьЗначенияСвойств ( новая, п ); 
	КонецЦикла;
	режим = РежимЗаписиДокумента.Проведение;
	док.ПометкаУдаления = Ложь;
	док.Записать ( режим );
	строкаТЧ = получитьПараметрыДляСтрокиТЧ ( док );
	Возврат строкаТЧ;

КонецФункции

&НаСервереБезКонтекста
Функция получитьПараметрыДляСтрокиТЧ ( Данные )
	
	п = Новый Структура ();
	п.Вставить ( "ВидОперации", Данные.ВидОперации );
	п.Вставить ( "Дата", Данные.Дата );
	п.Вставить ( "Комментарий", Данные.Комментарий );
	п.Вставить ( "Контрагент", Данные.Контрагент );
	п.Вставить ( "Номер", Данные.Номер );
	п.Вставить ( "Ссылка", Данные.Ссылка );
	п.Вставить ( "Статус", 0 );
	п.Вставить ( "СтатьяДДС", Данные.СтатьяДДС );
	т = Данные.Оплаты.Выгрузить ();
	п.Вставить ( "СуммаГривна", 0 );
	п.Вставить ( "СуммаДоллар", 0 );
	п.Вставить ( "СуммаЕвро", 0 );
	Для Каждого строкаТЗ Из т Цикл
		Если ( строкаТЗ.Валюта = Справочники.Валюты.Гривна ) Тогда
			п.СуммаГривна = строкаТЗ.Сумма;
		ИначеЕсли ( строкаТЗ.Валюта = Справочники.Валюты.Доллар ) Тогда
			п.СуммаДоллар = строкаТЗ.Сумма;
		ИначеЕсли ( строкаТЗ.Валюта = Справочники.Валюты.Евро ) Тогда
			п.СуммаЕвро = строкаТЗ.Сумма;
		КонецЕсли; 
	КонецЦикла; 
	Возврат п;

КонецФункции 

&НаКлиенте
Процедура ПриходПриАктивизацииСтроки ( Элемент )
	
	идентификатор = Элементы.Приход.ТекущаяСтрока;
	Если ( идентификатор = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	строкаТЧ = Объект.Приход.НайтиПоИдентификатору ( идентификатор );
	Если ( строкаТЧ <> Неопределено ) Тогда
		Если ( строкаТЧ.ВидОперации = ПредопределенноеЗначение ( "Перечисление.ВидОперацииПриходныйКассовыйОрдер.Конвертация" ) ) Тогда
			рко = получитьСвязанныйРКО ( строкаТЧ.Ссылка );
			Если ( рко <> Неопределено ) Тогда
				строкиРКО = Объект.Расход.НайтиСтроки ( Новый Структура ( "Ссылка", рко ) );
				Если ( строкиРКО.Количество () > 0 ) Тогда
					ид = строкиРКО [ 0 ].ПолучитьИдентификатор ();
				Иначе
					ид = 0;
				КонецЕсли; 
				Элементы.Расход.ТекущаяСтрока = ид;
			КонецЕсли;
		Иначе
			Элементы.Расход.ТекущаяСтрока = 0;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьСвязанныйРКО ( ПКО )
	
	рко = Неопределено; 
	Если ( ЗначениеЗаполнено ( ПКО ) ) Тогда
		с = "
		|выбрать
		|	Ссылка как РКО
		|из
		|	Документ.РасходныйКассовыйОрдер
		|где
		|	ДокументПКО = &ПКО  
		|";
		запрос = Новый Запрос ( с );
		запрос.УстановитьПараметр ( "ПКО", ПКО );
		результат = запрос.Выполнить ();
		выборка = результат.Выбрать ();
		Пока ( выборка.Следующий () ) Цикл
			рко = выборка.РКО;	
		КонецЦикла; 
	КонецЕсли; 
	Возврат рко;

КонецФункции 

&НаКлиенте
Процедура РасходПриАктивизацииСтроки ( Элемент )
	
	идентификатор = Элементы.Расход.ТекущаяСтрока;
	Если ( идентификатор = Неопределено ) Тогда
		Возврат;
	КонецЕсли; 
	строкаТЧ = Объект.Расход.НайтиПоИдентификатору ( идентификатор );
	Если ( строкаТЧ <> Неопределено ) Тогда
		Если ( строкаТЧ.ВидОперации = ПредопределенноеЗначение ( "Перечисление.ВидОперацииРасходныйКассовыйОрдер.Конвертация" ) ) Тогда
			пко = получитьСвязанныйПКО ( строкаТЧ.Ссылка );
			Если ( пко <> Неопределено ) Тогда
				строкиПКО = Объект.Приход.НайтиСтроки ( Новый Структура ( "Ссылка", пко ) );
				Если ( строкиПКО.Количество () > 0 ) Тогда
					строкаПКО = строкиПКО [ 0 ];
					ид = строкиПКО [ 0 ].ПолучитьИдентификатор ();  
				Иначе
					ид = 0;
				КонецЕсли;
				Элементы.Приход.ТекущаяСтрока = ид;
			КонецЕсли;
		Иначе
			Элементы.Приход.ТекущаяСтрока = 0;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьСвязанныйПКО ( РКО )
	
	пко = Неопределено; 
	Если ( ЗначениеЗаполнено ( РКО ) ) Тогда
		пко = РКО.ДокументПКО;	 
	КонецЕсли; 
	Возврат пко;

КонецФункции

&НаКлиенте
Процедура ПриходПередНачаломДобавления ( Элемент, Отказ, Копирование, Родитель, Группа, Параметр )
	
	Отказ = Истина;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходПередУдалением ( Элемент, Отказ )
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходПередНачаломДобавления ( Элемент, Отказ, Копирование, Родитель, Группа, Параметр )
	
	Отказ = Истина;		
	
КонецПроцедуры

&НаКлиенте
Процедура РасходПередУдалением ( Элемент, Отказ )
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуПриход ( Команда )
	
	новая = Объект.Приход.Добавить ();
	новая.Дата = НачалоДня ( Период.ДатаОкончания );
	новая.Статус = 2;
	Элементы.Приход.ТекущаяСтрока = новая.ПолучитьИдентификатор ();
	п = получитьДанныеЗаполнения ( Объект.Касса );
	Если ( п <> Неопределено ) Тогда
		новая.Контрагент = п.Контрагент;
		новая.СтатьяДДС = п.СтатьяДДС
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста  
Функция получитьДанныеЗаполнения ( Касса )
	
	п = Неопределено; 
	Если ( Касса.Код =  "000000005" ) Тогда
		п = Новый Структура ();
		п.Вставить ( "СтатьяДДС", Справочники.СтатьяДДС.НайтиПоКоду ( "000000092" ) );
		п.Вставить ( "Контрагент", Справочники.Контрагенты.НайтиПоКоду ( "000001366" ) );
	КонецЕсли; 
	Возврат п;
	
КонецФункции 

&НаКлиенте
Процедура ДобавитьСтрокуРасход ( Команда )
	
	новая = Объект.Расход.Добавить ();
	новая.Дата = НачалоДня ( Период.ДатаОкончания );
	новая.Статус = 2;
	Элементы.Расход.ТекущаяСтрока = новая.ПолучитьИдентификатор ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийПриход ( Команда )
	
	добавитьКомментарий ( "Приход" );
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийРасход ( Команда )
	
	добавитьКомментарий ( "Расход" );
	
КонецПроцедуры

&НаКлиенте
Процедура добавитьКомментарий ( Имя )
	
	Если ( Элементы [ Имя ].ВыделенныеСтроки.Количество () > 0 ) Тогда
		идентификатор = Элементы [ Имя ].ТекущаяСтрока;  
		строкаТЧ = Объект [ Имя ].НайтиПоИдентификатору ( идентификатор );
		Если ( ЗначениеЗаполнено ( строкаТЧ.Ссылка ) ) Тогда
			п = Новый Структура ();
			п.Вставить ( "Ссылка", строкаТЧ.Ссылка );
			п.Вставить ( "Комментарий", строкаТЧ.Комментарий );
			ОткрытьФорму ( "Обработка.Кассир.Форма.Комментарий", п, ЭтаФорма, , , , Новый ОписаниеОповещения ( "ВводКомментарияЗавершение", ЭтотОбъект, Новый Структура ( "Идентификатор, Имя", идентификатор, Имя ) ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияЗавершение ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	строкаТЧ = Объект [ Парамы.Имя ].НайтиПоИдентификатору ( Парамы.Идентификатор );
	Если ( строкаТЧ <> Неопределено ) Тогда
		строкаТЧ.Комментарий = Ответ;
		строкаТЧ.КомментарийЗаполнен = ? ( Ответ = "", "", "+" ); 
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СкопироватьПриход ( Команда )
	
	копироватьСтроку ( "Приход" );
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРасход ( Команда )
	
	копироватьСтроку ( "Расход" );
	
КонецПроцедуры

&НаКлиенте
Процедура копироватьСтроку ( Имя )
	
	текущиеДанные = Элементы [ Имя ].ТекущиеДанные;
	Если ( текущиеДанные = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	идентификатор = Элементы [ Имя ].ТекущаяСтрока;  
	строкаТЧ = Объект [ Имя ].НайтиПоИдентификатору ( идентификатор );
	новая = Объект [ Имя ].Добавить ();
	ЗаполнитьЗначенияСвойств ( новая, строкаТЧ );
	новая.Номер = "";
	новая.Ссылка = ? ( Имя = "Приход", ПредопределенноеЗначение ( "Документ.ПриходныйКассовыйОрдер.ПустаяСсылка" ), ПредопределенноеЗначение ( "Документ.РасходныйКассовыйОрдер.ПустаяСсылка" ) );  
	заполнитьДокумент ( Имя, новая.ПолучитьИдентификатор () );
	заполнитьОстатки ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel ( Команда )
	
	п = Новый Структура ();
	п.Вставить ( "ДатаНачала", Период.ДатаНачала );
	п.Вставить ( "ДатаОкончания", Период.ДатаОкончания );
	п.Вставить ( "Касса", Объект.Касса );
	ОткрытьФорму ( "Обработка.Кассир.Форма.ВыгрузкаВЕксель", п, ЭтаФорма, , , , Новый ОписаниеОповещения ( "ВыборПараметровВыгрузки", ЭтотОбъект ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс ); 	
	
КонецПроцедуры

&НаКлиенте 
Процедура ВыборПараметровВыгрузки ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	Иначе
		выгрузитьТаблицы ( Ответ );
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура выгрузитьТаблицы ( Данные )
	
	результат = получитьМакетExcel ( Данные );
	п = Новый Структура ();
	п.Вставить ( "Результат", результат );
	п.Вставить ( "Фильтр", "Microsoft Excel (*.xlsx)|*.xlsx" );
	п.Вставить ( "ТипФайла", ТипФайлаТабличногоДокумента.XLSX );
	РаботаСФайлами.СохранитьДокументВФайл ( п );
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьМакетExcel ( Парамы )
	
	табДок = Новый ТабличныйДокумент ();
	макет = Обработки.Кассир.ПолучитьМакет ( "Ексель" );
	вывестиЗаголовок ( табДок, макет, Парамы );
	вывестиОстатки ( табДок, макет, Парамы );
	вывестиШапку ( табДок, макет );
	вывестиТаблицы ( табДок, макет, Парамы );
	Возврат табДок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура вывестиЗаголовок ( ТабДок, Макет, Парамы )
	
	заголовок = Макет.ПолучитьОбласть ( "Общая|Заголовок" );
	заголовок.Параметры.Период = Формат ( Парамы.ДатаНачала, "ДФ=dd.MM.yyyy" ) + " - " + Формат ( Парамы.ДатаОкончания, "ДФ=dd.MM.yyyy" );
	заголовок.Параметры.Статус = Парамы.Статус;
	ТабДок.Вывести ( заголовок );
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вывестиОстатки ( ТабДок, Макет, Парамы )
	
	шапка = Макет.ПолучитьОбласть ( "Общая|ОстаткиШапка" );
	ТабДок.Вывести ( шапка );
	остатки = Макет.ПолучитьОбласть ( "Общая|Остатки" );
	остатки.Параметры.ДатаНачала = Парамы.ДатаНачала;
	остатки.Параметры.ДатаОкончания = Парамы.ДатаОкончания;
	данные = получитьОстатокПоКассе ( НачалоДня ( Парамы.ДатаНачала ), Парамы.Касса );
	остатки.Параметры.СуммаДолларНаНачало = данные.СуммаДоллар;
	остатки.Параметры.СуммаГривнаНаНачало = данные.СуммаГривна;
	остатки.Параметры.СуммаЕвроНаНачало = данные.СуммаЕвро;
	данные = получитьОстатокПоКассе ( КонецДня ( Парамы.ДатаОкончания ), Парамы.Касса );
	остатки.Параметры.СуммаДолларНаКонец = данные.СуммаДоллар;
	остатки.Параметры.СуммаГривнаНаКонец = данные.СуммаГривна;
	остатки.Параметры.СуммаЕвроНаКонец = данные.СуммаДоллар;
	ТабДок.Вывести ( остатки );
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура вывестиШапку ( ТабДок, Макет )
	
	шапка = Макет.ПолучитьОбласть ( "Общая|Шапка" );
	шапка.Параметры.ВидДвижения = "ПРИХОД";
	ТабДок.Вывести ( шапка );
	шапка.Параметры.ВидДвижения = "РАСХОД";
	ТабДок.Присоединить ( шапка );
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вывестиТаблицы ( ТабДок, Макет, Парамы )
	
	данные = получитьДанныеДляМакета ( Парамы );
	приход = данные.Приход;
	расход = данные.Расход;
	колвоПриход = приход.Количество ();
	колвоРасход = расход.Количество ();
	СуммаДолларПриход = 0;
	СуммаЕвроПриход = 0;
	СуммаГривнаПриход = 0;
	СуммаДолларРасход = 0;
	СуммаЕвроРасход = 0;
	СуммаГривнаРасход = 0;
	колво = Макс ( колвоПриход, колвоРасход );
	счетчик = 1;
	Пока счетчик <= колво Цикл 
		Если ( колвоПриход >= счетчик ) Тогда
			строкаПриход = приход [ счетчик - 1 ];
			область = получитьОбласть ( Макет, "СтрокаТЧ" );
			область.Параметры.Заполнить ( строкаПриход );
			СуммаДолларПриход = СуммаДолларПриход + строкаПриход.СуммаДоллар;
			СуммаЕвроПриход = СуммаЕвроПриход + строкаПриход.СуммаЕвро;
			СуммаГривнаПриход = СуммаГривнаПриход + строкаПриход.СуммаГривна;
		Иначе
			область = получитьОбласть ( Макет, "СтрокаПустая" );
		КонецЕсли;
		ТабДок.Вывести ( область );
		Если ( колвоРасход >= счетчик ) Тогда
			строкаРасход = расход [ счетчик - 1 ];
			область = получитьОбласть ( Макет, "СтрокаТЧ" );
			область.Параметры.Заполнить ( строкаРасход );
			СуммаДолларРасход = СуммаДолларРасход + строкаРасход.СуммаДоллар;
			СуммаЕвроРасход = СуммаЕвроРасход + строкаРасход.СуммаЕвро;
			СуммаГривнаРасход = СуммаГривнаРасход + строкаРасход.СуммаГривна;
		Иначе
			область = получитьОбласть ( Макет, "СтрокаПустая" );
		КонецЕсли;
		ТабДок.Присоединить ( область );
		счетчик = счетчик + 1;
	КонецЦикла;
	итоги = получитьОбласть ( Макет, "Подвал" );
	итоги.Параметры.СуммаДоллар = СуммаДолларПриход;
	итоги.Параметры.СуммаЕвро = СуммаЕвроПриход;
	итоги.Параметры.СуммаГривна = СуммаГривнаПриход;
	ТабДок.Вывести ( итоги );
	итоги = получитьОбласть ( Макет, "Подвал" );
	итоги.Параметры.СуммаДоллар = СуммаДолларРасход;
	итоги.Параметры.СуммаЕвро = СуммаЕвроРасход;
	итоги.Параметры.СуммаГривна = СуммаГривнаРасход;
	ТабДок.Присоединить ( итоги );
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьДанныеДляМакета ( Парамы )
	
	с = "
	|выбрать
	|	Дата как Дата, 
	|	Комментарий как Комментарий, 
	|	Контрагент как Контрагент, 
	|	НазначениеПлатежа как НазначениеПлатежа, 
	|	Номер как Номер, 
	|	Ссылка как Ссылка, 
	|	выбор
	|		когда ПометкаУдаления 
	|			тогда 1
	|		когда Проведен
	|			тогда 0
	|		иначе
	|			2
	|	конец как Статус,
	|	СтатьяДДС как СтатьяДДС,
	|	ВидОперации как ВидОперации
	|поместить ВТПКО 
	|из
	|	Документ.ПриходныйКассовыйОрдер
	|где
	|	Дата между &ДатаНачала и &ДатаОкончания
	|	#УсловиеСтатус#
	|;
	|выбрать
	|	Дата как Дата, 
	|	Комментарий как Комментарий, 
	|	Контрагент как Контрагент, 
	|	НазначениеПлатежа как НазначениеПлатежа, 
	|	Номер как Номер, 
	|	Ссылка как Ссылка, 
	|	выбор
	|		когда ПометкаУдаления 
	|			тогда 1
	|		когда Проведен
	|			тогда 0
	|		иначе
	|			2
	|	конец как Статус,
	|	СтатьяДДС как СтатьяДДС,
	|	ВидОперации как ВидОперации
 	|поместить ВТРКО 
	|из
	|	Документ.РасходныйКассовыйОрдер
	|где
	|	Дата между &ДатаНачала и &ДатаОкончания
	|	#УсловиеСтатус#
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	сумма ( 
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Гривна )
	|					тогда Сумма
	|				иначе
	|			0
	|			конец ) как СуммаГривна,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Доллар )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаДоллар,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Евро )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаЕвро
	|поместить ВТПКООплаты
	|из
	|	Документ.ПриходныйКассовыйОрдер.Оплаты
	|где
	|	Ссылка в ( выбрать Ссылка из ВТПКО )
	|сгруппировать по
	|	Ссылка
	|;
	|выбрать
	|	Ссылка как Ссылка,
	|	сумма ( 
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Гривна )
	|					тогда Сумма
	|				иначе
	|			0
	|			конец ) как СуммаГривна,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Доллар )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаДоллар,
	|	сумма (  
	|			выбор
	|				когда Валюта = значение ( Справочник.Валюты.Евро )
	|					тогда Сумма
	|				иначе
	|					0
	|			конец ) как СуммаЕвро
	|поместить ВТРКООплаты
	|из
	|	Документ.РасходныйКассовыйОрдер.Оплаты
	|где
	|	Ссылка в ( выбрать Ссылка из ВТРКО )
	|сгруппировать по
	|	Ссылка
	|;
	|выбрать
	|	ВТПКО.Дата как Дата, 
	|	ВТПКО.Комментарий как Комментарий, 
	|	ВТПКО.Контрагент как Контрагент, 
	|	ВТПКО.НазначениеПлатежа как НазначениеПлатежа, 
	|	ВТПКО.Номер как Номер, 
	|	ВТПКО.Ссылка как Ссылка, 
	|	ВТПКО.Статус как Статус,
	|	ВТПКО.СтатьяДДС как СтатьяДДС,
	|	ВТПКО.ВидОперации как ВидОперации,
	|	естьnull ( ВТПКООплаты.СуммаГривна, 0 ) как СуммаГривна,
	|	естьnull ( ВТПКООплаты.СуммаДоллар, 0 ) как СуммаДоллар,
	|	естьnull ( ВТПКООплаты.СуммаЕвро, 0 ) как СуммаЕвро,
	|	выбор
	|		когда ВТПКО.Комментарий = """"
	|			тогда """"
 	|		иначе
	|			""+""
	|	конец как КомментарийЗаполнен
	|из
	|	ВТПКО как ВТПКО
	|	левое соединение ВТПКООплаты как ВТПКООплаты
	|	по ВТПКО.Ссылка = ВТПКООплаты.Ссылка
	|упорядочить по
	|	ВТПКО.Номер возр
	|;
	|выбрать
	|	ВТРКО.Дата как Дата, 
	|	ВТРКО.Комментарий как Комментарий, 
	|	ВТРКО.Контрагент как Контрагент, 
	|	ВТРКО.НазначениеПлатежа как НазначениеПлатежа, 
	|	ВТРКО.Номер как Номер, 
	|	ВТРКО.Ссылка как Ссылка, 
	|	ВТРКО.Статус как Статус,
	|	ВТРКО.СтатьяДДС как СтатьяДДС,
	|	ВТРКО.ВидОперации как ВидОперации,
	|	естьnull ( ВТРКООплаты.СуммаГривна, 0 ) как СуммаГривна,
	|	естьnull ( ВТРКООплаты.СуммаДоллар, 0 ) как СуммаДоллар,
	|	естьnull ( ВТРКООплаты.СуммаЕвро, 0 ) как СуммаЕвро,
	|	выбор
	|		когда ВТРКО.Комментарий = """"
	|			тогда """"
 	|		иначе
	|			""+""
	|	конец как КомментарийЗаполнен
	|из
	|	ВТРКО как ВТРКО
	|	левое соединение ВТРКООплаты как ВТРКООплаты
	|	по ВТРКО.Ссылка = ВТРКООплаты.Ссылка
	|упорядочить по
	|	ВТРКО.Номер возр
	|";
	Если ( Парамы.Статус = "Все" ) Тогда
		статус = " и Истина ";
	ИначеЕсли ( Парамы.Статус = "Выполнено" ) Тогда // проведен
		статус = " и Проведен ";	
	ИначеЕсли ( Парамы.Статус = "Отменен" ) Тогда 
		статус = " и ПометкаУдаления ";
	ИначеЕсли ( Парамы.Статус = "План" ) Тогда 
		статус = " и не ПометкаУдаления и не Проведен ";
	КонецЕсли;
	с = СтрЗаменить ( с, "#УсловиеСтатус#", статус );
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "ДатаНачала", Парамы.ДатаНачала );
	запрос.УстановитьПараметр ( "ДатаОкончания", Парамы.ДатаОкончания );
	результат = запрос.ВыполнитьПакет ();
	п = Новый Структура ();
	п.Вставить ( "Приход", результат [ 4 ].Выгрузить () );
	п.Вставить ( "Расход", результат [ 5 ].Выгрузить () );
	Возврат п;

КонецФункции

&НаСервереБезКонтекста
Функция получитьОбласть ( Макет, Имя )
	
	Возврат Макет.ПолучитьОбласть ( "Общая|" + Имя );

КонецФункции 

&НаКлиенте
Процедура ОбработкаОповещения ( ИмяСобытия, Параметр, Источник )
	
	Если ( ИмяСобытия = "ИзменениеКассовыхДокументов" ) Тогда
		приЗаписиКассовогоДокумента ( Источник );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура приЗаписиКассовогоДокумента ( Источник )
	
	Если ( ТипЗнч ( Источник ) = Тип ( "ДокументСсылка.ПриходныйКассовыйОрдер" ) ) Тогда
		имяТЧ = "Приход";
	ИначеЕсли ( ТипЗнч ( Источник ) = Тип ( "ДокументСсылка.РасходныйКассовыйОрдер" ) ) Тогда
		имяТЧ = "Расход";
	КонецЕсли;
	мСтрок = Объект [ имяТЧ ].НайтиСтроки ( Новый Структура ( "Ссылка", Источник ) );
	Если ( мСтрок.Количество () > 0 ) Тогда
		строкаТЧ = мСтрок [ 0 ];
		данные = получитьДанныеДокумента ( Источник );
		ЗаполнитьЗначенияСвойств ( строкаТЧ, данные );  
		заполнитьОстатки ();		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьДанныеДокумента ( Источник )
	
	Если ( ТипЗнч ( Источник ) = Тип ( "ДокументСсылка.ПриходныйКассовыйОрдер" ) ) Тогда
		с = "
		|выбрать
		|	Дата как Дата, 
		|	Комментарий как Комментарий, 
		|	Контрагент как Контрагент, 
		|	НазначениеПлатежа как НазначениеПлатежа, 
		|	Номер как Номер, 
		|	Ссылка как Ссылка, 
		|	выбор
		|		когда ПометкаУдаления 
		|			тогда 1
		|		когда Проведен
		|			тогда 0
		|		иначе
		|			2
		|	конец как Статус,
		|	СтатьяДДС как СтатьяДДС,
		|	ВидОперации как ВидОперации
		|поместить ВТПКО 
		|из
		|	Документ.ПриходныйКассовыйОрдер
		|где
		|	Ссылка = &Источник
		|;
		|выбрать
		|	Ссылка как Ссылка,
		|	сумма ( 
		|			выбор
		|				когда Валюта = значение ( Справочник.Валюты.Гривна )
		|					тогда Сумма
		|				иначе
		|			0
		|			конец ) как СуммаГривна,
		|	сумма (  
		|			выбор
		|				когда Валюта = значение ( Справочник.Валюты.Доллар )
		|					тогда Сумма
		|				иначе
		|					0
		|			конец ) как СуммаДоллар,
		|	сумма (  
		|			выбор
		|				когда Валюта = значение ( Справочник.Валюты.Евро )
		|					тогда Сумма
		|				иначе
		|					0
		|			конец ) как СуммаЕвро
		|поместить ВТПКООплаты
		|из
		|	Документ.ПриходныйКассовыйОрдер.Оплаты
		|где
		|	Ссылка в ( выбрать Ссылка из ВТПКО )
		|сгруппировать по
		|	Ссылка
		|;
		|выбрать
		|	ВТПКО.Дата как Дата, 
		|	ВТПКО.Комментарий как Комментарий, 
		|	ВТПКО.Контрагент как Контрагент, 
		|	ВТПКО.НазначениеПлатежа как НазначениеПлатежа, 
		|	ВТПКО.Номер как Номер, 
		|	ВТПКО.Ссылка как Ссылка, 
		|	ВТПКО.Статус как Статус,
		|	ВТПКО.СтатьяДДС как СтатьяДДС,
		|	ВТПКО.ВидОперации как ВидОперации,
		|	естьnull ( ВТПКООплаты.СуммаГривна, 0 ) как СуммаГривна,
		|	естьnull ( ВТПКООплаты.СуммаДоллар, 0 ) как СуммаДоллар,
		|	естьnull ( ВТПКООплаты.СуммаЕвро, 0 ) как СуммаЕвро,
		|	выбор
		|		когда ВТПКО.Комментарий = """"
		|			тогда """"
		|		иначе
		|			""+""
		|	конец как КомментарийЗаполнен
		|из
		|	ВТПКО как ВТПКО
		|	левое соединение ВТПКООплаты как ВТПКООплаты
		|	по ВТПКО.Ссылка = ВТПКООплаты.Ссылка
		|";
	ИначеЕсли ( ТипЗнч ( Источник ) = Тип ( "ДокументСсылка.РасходныйКассовыйОрдер" ) ) Тогда 
		с = "
		|выбрать
		|	Дата как Дата, 
		|	Комментарий как Комментарий, 
		|	Контрагент как Контрагент, 
		|	НазначениеПлатежа как НазначениеПлатежа, 
		|	Номер как Номер, 
		|	Ссылка как Ссылка, 
		|	выбор
		|		когда ПометкаУдаления 
		|			тогда 1
		|		когда Проведен
		|			тогда 0
		|		иначе
		|			2
		|	конец как Статус,
		|	СтатьяДДС как СтатьяДДС,
		|	ВидОперации как ВидОперации
		|поместить ВТРКО 
		|из
		|	Документ.РасходныйКассовыйОрдер
		|где
		|	Ссылка = &Источник
		|;
		|выбрать
		|	Ссылка как Ссылка,
		|	сумма ( 
		|			выбор
		|				когда Валюта = значение ( Справочник.Валюты.Гривна )
		|					тогда Сумма
		|				иначе
		|			0
		|			конец ) как СуммаГривна,
		|	сумма (  
		|			выбор
		|				когда Валюта = значение ( Справочник.Валюты.Доллар )
		|					тогда Сумма
		|				иначе
		|					0
		|			конец ) как СуммаДоллар,
		|	сумма (  
		|			выбор
		|				когда Валюта = значение ( Справочник.Валюты.Евро )
		|					тогда Сумма
		|				иначе
		|					0
		|			конец ) как СуммаЕвро
		|поместить ВТРКООплаты
		|из
		|	Документ.РасходныйКассовыйОрдер.Оплаты
		|где
		|	Ссылка в ( выбрать Ссылка из ВТРКО )
		|сгруппировать по
		|	Ссылка
		|;
		|выбрать
		|	ВТРКО.Дата как Дата, 
		|	ВТРКО.Комментарий как Комментарий, 
		|	ВТРКО.Контрагент как Контрагент, 
		|	ВТРКО.НазначениеПлатежа как НазначениеПлатежа, 
		|	ВТРКО.Номер как Номер, 
		|	ВТРКО.Ссылка как Ссылка, 
		|	ВТРКО.Статус как Статус,
		|	ВТРКО.СтатьяДДС как СтатьяДДС,
		|	ВТРКО.ВидОперации как ВидОперации,
		|	естьnull ( ВТРКООплаты.СуммаГривна, 0 ) как СуммаГривна,
		|	естьnull ( ВТРКООплаты.СуммаДоллар, 0 ) как СуммаДоллар,
		|	естьnull ( ВТРКООплаты.СуммаЕвро, 0 ) как СуммаЕвро,
		|	выбор
		|		когда ВТРКО.Комментарий = """"
		|			тогда """"
		|		иначе
		|			""+""
		|	конец как КомментарийЗаполнен
		|из
		|	ВТРКО как ВТРКО
		|	левое соединение ВТРКООплаты как ВТРКООплаты
		|	по ВТРКО.Ссылка = ВТРКООплаты.Ссылка
		|";	
	КонецЕсли; 
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "Источник", Источник );
	результат = запрос.ВыполнитьПакет ();
	выборка = результат [ 2 ].Выбрать ();
	выборка.Следующий ();
	п = Новый Структура ();
	п.Вставить ( "Дата", выборка.Дата );
	п.Вставить ( "Комментарий", выборка.Комментарий );
	п.Вставить ( "Контрагент", выборка.Контрагент );
	п.Вставить ( "НазначениеПлатежа", выборка.НазначениеПлатежа );
	п.Вставить ( "Номер", выборка.Номер );
	п.Вставить ( "Ссылка", выборка.Ссылка );
	п.Вставить ( "Статус", выборка.Статус );
	п.Вставить ( "СтатьяДДС", выборка.СтатьяДДС );
	п.Вставить ( "ВидОперации", выборка.ВидОперации );
	п.Вставить ( "СуммаГривна", выборка.СуммаГривна );
	п.Вставить ( "СуммаДоллар", выборка.СуммаДоллар );
	п.Вставить ( "СуммаЕвро", выборка.СуммаЕвро );
	п.Вставить ( "КомментарийЗаполнен", выборка.КомментарийЗаполнен );
	Возврат п;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные ( Команда )
	
	обновитьДанныеСервер ();

КонецПроцедуры

&НаСервере
Процедура обновитьДанныеСервер ()
	
	заполнитьТаблицы ();
	заполнитьОстатки ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении ( Элемент )
	
	Объект.ДатаНачала = НачалоГода ( Объект.Год ) + ( Объект.ДатаНачала - НачалоГода ( Объект.ДатаНачала ) );  
	Период.ДатаНачала = Объект.ДатаНачала;  
	приИзмененииПериода ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении ( Элемент )
	
	Объект.ДатаОкончания = КонецДня ( НачалоГода ( Объект.Год ) + ( Объект.ДатаОкончания - НачалоГода ( Объект.ДатаОкончания ) ) );
	Период.ДатаОкончания = Объект.ДатаОкончания; 
	приИзмененииПериода ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЕксельПриход ( Команда )
	
	заполнитьИзЕксель ( "Приход" );	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЕксельРасход ( Команда )
	
	заполнитьИзЕксель ( "Расход" );
	
КонецПроцедуры

&НаКлиенте
Процедура заполнитьИзЕксель ( ИмяТЧ )
	
	п = Новый Структура (); 
	п.Вставить ( "ИмяТЧ", ИмяТЧ );
	ОткрытьФорму ( "ОбщаяФорма.БуферОбменаИзExcel", , ЭтаФорма, , , , Новый ОписаниеОповещения ( "ФормаЗаполнитьИзЕксель", ЭтотОбъект, п ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполнитьИзЕксель ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли; 
	заполнитьПоБуферуОбмена ( Ответ, Парамы );	
	
КонецПроцедуры

&НаКлиенте
Процедура заполнитьПоБуферуОбмена ( Буфер, Парамы )
	
	текст = Новый ТекстовыйДокумент ();
	текст.УстановитьТекст ( Буфер );
	количествоСтрок = Текст.КоличествоСтрок ();
	счетчик = 1;
 	Пока счетчик <= количествоСтрок Цикл
		текущаяСтрока = Текст.ПолучитьСтроку ( счетчик );
		Если ( текущаяСтрока <> "" ) Тогда
			данные = СтрРазделить ( текущаяСтрока, Символы.Таб );
			Если ( СтрНайти ( текущаяСтрока, "Конвертация" ) > 0 ) Тогда
				п = заполнитьСтрокуТаблицыКонвертация ( данные, Парамы.ИмяТЧ, Объект.Касса, Объект.Организация, Объект.Год  ); 		
			Иначе
				п = заполнитьСтрокуТаблицы ( данные, Парамы.ИмяТЧ, Объект.Касса, Объект.Организация, Объект.Год );
			КонецЕсли;
			новая = Объект [ Парамы.ИмяТЧ ].Добавить ();
			ЗаполнитьЗначенияСвойств ( новая, п );
		КонецЕсли; 
		счетчик = счетчик + 1;
	КонецЦикла;
	заполнитьОстатки ();
	
КонецПроцедуры 

&НаКлиенте
Функция получитьБуферОбмена ()
	
	буфер = Новый COMОбъект ( "htmlfile" );
	текст = Новый ТекстовыйДокумент ();
	текст.УстановитьТекст ( буфер.ParentWindow.ClipboardData.Getdata ( "Text" ) );
	Возврат текст;
	
КонецФункции

&НаСервереБезКонтекста  
Функция заполнитьСтрокуТаблицы ( Данные, ИмяТЧ, Касса, Организация, Год )
	
	Если ( ИмяТЧ = "Приход" ) Тогда
		док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент ();
		док.ВидОперации = Перечисления.ВидОперацииПриходныйКассовыйОрдер.ОплатаКлиента;
	ИначеЕсли ( ИмяТЧ = "Расход" ) Тогда
		док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент ();
		док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.Оплата;
	КонецЕсли; 
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	док.Дата = получитьДату ( Данные [ 0 ], Год );
	док.ДатаОперации = док.Дата;
	док.Касса = Касса;
	док.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию ( СокрЛП ( Данные [ 1 ] ), Истина );
	док.СтатьяДДС = Справочники.СтатьяДДС.НайтиПоНаименованию ( СокрЛП ( Данные [ 2 ] ), Истина );
	док.Организация = Организация;
	док.ДолгПоВалютам = Истина;
	док.Комментарий = СокрЛП ( Данные [ 3 ] );
	док.Сумма = 0;
	Если ( Данные [ 4 ] <> "" ) Тогда
		новая = док.Оплаты.Добавить ();
		новая.Валюта = Справочники.Валюты.Доллар;
		новая.Сумма = получитьЧисло ( Данные [ 4 ] );  
	КонецЕсли;
	Если ( Данные [ 5 ] <> "" ) Тогда
		новая = док.Оплаты.Добавить ();
		новая.Валюта = Справочники.Валюты.Евро;
		новая.Сумма = получитьЧисло ( Данные [ 5 ] );
	КонецЕсли;
	Если ( Данные [ 6 ] <> "" ) Тогда
		новая = док.Оплаты.Добавить ();
		новая.Валюта = Справочники.Валюты.Гривна;
		новая.Сумма = получитьЧисло ( Данные [ 6 ] );
	КонецЕсли;
	режим = РежимЗаписиДокумента.Проведение;
	док.ПометкаУдаления = Ложь;
	Попытка
		док.Записать ( РежимЗаписиДокумента.Запись );
	Исключение
		док.Записать ( РежимЗаписиДокумента.Запись );
	КонецПопытки; 
	строкаТЧ = получитьПараметрыДляСтрокиТЧ ( док );
	Возврат строкаТЧ;
	
КонецФункции

&НаСервереБезКонтекста  
Функция заполнитьСтрокуТаблицыКонвертация ( Данные, ИмяТЧ, Касса, Организация, Год )
	
	Если ( ИмяТЧ = "Приход" ) Тогда
		док = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент ();
		док.ВидОперации = Перечисления.ВидОперацииПриходныйКассовыйОрдер.Конвертация;
	ИначеЕсли ( ИмяТЧ = "Расход" ) Тогда
		док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент ();
		док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.Конвертация;
	КонецЕсли;
	док.Курс = получитьКурсКонвертация ( Данные [ 2 ] );  
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	док.Дата = получитьДату ( Данные [ 0 ], Год );
	док.ДатаОперации = док.Дата;
	док.Касса = Касса;
	док.Контрагент = Справочники.Контрагенты.ПустаяСсылка ();
	док.СтатьяДДС = Справочники.СтатьяДДС.Конвертация;
	док.Организация = Организация;
	док.ДолгПоВалютам = Истина;
	док.Комментарий = "";
	новая = Неопределено; 
	Если ( Данные [ 4 ] <> "" ) Тогда
		новая = док.Оплаты.Добавить ();
		новая.Валюта = Справочники.Валюты.Доллар;
		новая.Сумма = получитьЧисло ( Данные [ 4 ] );
	КонецЕсли;
	Если ( Данные [ 5 ] <> "" ) Тогда
		новая = док.Оплаты.Добавить ();
		новая.Валюта = Справочники.Валюты.Евро;
		новая.Сумма = получитьЧисло ( Данные [ 5 ] );
	КонецЕсли;
	Если ( Данные [ 6 ] <> "" ) Тогда
		новая = док.Оплаты.Добавить ();
		новая.Валюта = Справочники.Валюты.Гривна;
		новая.Сумма = получитьЧисло ( Данные [ 6 ] );
	КонецЕсли;
	Если ( новая <> Неопределено ) Тогда
		док.Сумма = новая.Сумма;
		док.Валюта = новая.Валюта;
	КонецЕсли; 
	режим = РежимЗаписиДокумента.Проведение;
	док.ПометкаУдаления = Ложь;
	Попытка
		док.Записать ( РежимЗаписиДокумента.Проведение );
	Исключение
		док.Записать ( РежимЗаписиДокумента.Запись );
	КонецПопытки;
	Если ( ИмяТЧ = "Расход" ) Тогда
		док.ДокументПКО = найтиДокументПКО ( док.Ссылка );
		док.Записать ();
	Иначе
		заполнитьДокументПКОПоПриходу ( док );
	КонецЕсли; 
	строкаТЧ = получитьПараметрыДляСтрокиТЧ ( док );
	Возврат строкаТЧ;
	
КонецФункции

&НаСервереБезКонтекста
Функция найтиДокументПКО ( РКО )
	
	документПКО = Документы.ПриходныйКассовыйОрдер.ПустаяСсылка ();
	с = "
	|выбрать первые 1
	|	Ссылка как ДокументПКО
	|из
	|	Документ.ПриходныйКассовыйОрдер
	|где
	|	Дата между &ДатаНачала и &ДатаОкончания 
	|	и ВидОперации = значение ( Перечисление.ВидОперацииПриходныйКассовыйОрдер.Конвертация )
	|	и Касса = &Касса и Курс = &Курс
	|	и выразить ( Сумма как число ( 15, 0 ) ) = &Сумма 
	|	и Проведен
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "ДатаНачала", НачалоДня ( РКО.Дата ) );
	запрос.УстановитьПараметр ( "ДатаОкончания", КонецДня ( РКО.Дата ) );
	запрос.УстановитьПараметр ( "Касса", РКО.Касса );
	запрос.УстановитьПараметр ( "Курс", РКО.Курс );
	сумма = 0;
	Если ( РКО.Валюта = Справочники.Валюты.Гривна ) Тогда
		сумма = Цел ( РКО.Сумма / РКО.Курс );
	Иначе
		сумма = Цел ( РКО.Сумма * РКО.Курс );
	КонецЕсли;
	запрос.УстановитьПараметр ( "Сумма", сумма );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	Пока ( выборка.Следующий () ) Цикл
		документПКО = выборка.ДокументПКО;	
	КонецЦикла; 
	Возврат документПКО;

КонецФункции

&НаСервереБезКонтекста
Процедура заполнитьДокументПКОПоПриходу ( ПКО )
	
	с = "
	|выбрать первые 1
	|	Ссылка как РКО
	|из
	|	Документ.РасходныйКассовыйОрдер
	|где
	|	Дата между &ДатаНачала и &ДатаОкончания 
	|	и ВидОперации = значение ( Перечисление.ВидОперацииРасходныйКассовыйОрдер.Конвертация )
	|	и Касса = &Касса и Курс = &Курс
	|	и выразить ( Сумма как число ( 15, 0 ) ) = &Сумма 
	|	и Проведен
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "ДатаНачала", НачалоДня ( ПКО.Дата ) );
	запрос.УстановитьПараметр ( "ДатаОкончания", КонецДня ( ПКО.Дата ) );
	запрос.УстановитьПараметр ( "Касса", ПКО.Касса );
	запрос.УстановитьПараметр ( "Курс", ПКО.Курс );
	сумма = 0;
	Если ( ПКО.Валюта = Справочники.Валюты.Гривна ) Тогда
		сумма = Цел ( ПКО.Сумма / ПКО.Курс );
	Иначе
		сумма = Цел ( ПКО.Сумма * ПКО.Курс );
	КонецЕсли;
	запрос.УстановитьПараметр ( "Сумма", сумма );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	Пока ( выборка.Следующий () ) Цикл
		ПКО.ДокументПКО = выборка.РКО;
		ПКО.Записать ();
	КонецЦикла; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция получитьКурсКонвертация ( Данные )
	
	текст = Данные;
	текст = СтрЗаменить ( текст, "Конвертация", "" );
	текст = СтрЗаменить ( текст, "(", "" );
	текст = СтрЗаменить ( текст, ")", "" );
	Попытка
		курс = получитьЧисло ( текст );
	Исключение
		курс = 0;
	КонецПопытки;
	Возврат курс;

КонецФункции 

&НаСервереБезКонтекста 
Функция получитьДату ( СтрокаДата, ГодСоздания )
	
	с = СокрЛП ( СтрокаДата );
	докДата = Дата ( Год ( ГодСоздания ), Число ( Прав ( с, 2 ) ), Число ( Лев ( с, 2 ) ) );
	Возврат докДата;

КонецФункции 

&НаКлиенте
Процедура ДобавитьПеремещение ( Команда )
	
	п = Новый Структура ();
	п.Вставить ( "Касса", Объект.Касса );
	п.Вставить ( "Дата", НачалоДня ( Объект.ДатаОкончания ) ); 
	ОткрытьФорму ( "Обработка.Кассир.Форма.Перемещение", п, ЭтаФорма, , , , Новый ОписаниеОповещения ( "ПеремещениеЗавершение", ЭтотОбъект ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеЗавершение ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	ответ.Вставить ( "Организация", Объект.Организация );
	создавать4документа = проверитьКассыТаможняСофия ( ответ );
	Если ( создавать4документа ) Тогда
		п = создатьПеремещениеТаможняМЕ ( ответ );
		новая = Объект.Расход.Добавить ();
		ЗаполнитьЗначенияСвойств ( новая, п ); // расход из кассы Таможня
		создатьПеремещениеМЕКассаСофия ( ответ );
	Иначе
		п = создатьПеремещение ( ответ );
		новая = Объект.Расход.Добавить ();
		ЗаполнитьЗначенияСвойств ( новая, п );	
	КонецЕсли; 
	обновитьДанныеСервер ();
	заполнитьОстатки ();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция создатьПеремещение ( Данные )
	
	// расход
	док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент ();
	док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.ПеремещениеВКассу;
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	док.Дата = Данные.Дата;
	док.Контрагент = Справочники.Контрагенты.ПустаяСсылка ();
	док.ДатаОперации = док.Дата;
	док.Касса = Данные.Касса;
	док.КассаПеремещение = Данные.КассаПеремещение;
	док.СтатьяДДС = Справочники.СтатьяДДС.НайтиПоКоду ( "000000002" );
	док.Сумма = Данные.Сумма;
	док.Валюта = Данные.Валюта;
	док.Организация = Данные.Организация;
	док.ДолгПоВалютам = Ложь;
	режим = РежимЗаписиДокумента.Проведение;
	док.ПометкаУдаления = Ложь;
	док.Записать ( режим );
	приход = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент ();
	приход.Заполнить ( док.Ссылка );
	приход.Записать ( режим );
	док.ДокументПКО = приход.Ссылка;
	док.Записать ( режим );
	п = заполнитьСтрокуТЧПеремещение ( док );
	Возврат п;

КонецФункции

&НаСервереБезКонтекста
Функция заполнитьСтрокуТЧПеремещение ( Данные )
	
	п = Новый Структура ();
	п.Вставить ( "ВидОперации", Данные.ВидОперации );
	п.Вставить ( "Дата", Данные.Дата );
	п.Вставить ( "Комментарий", Данные.Комментарий );
	п.Вставить ( "Контрагент", Данные.Контрагент );
	п.Вставить ( "Номер", Данные.Номер );
	п.Вставить ( "Ссылка", Данные.Ссылка );
	п.Вставить ( "Статус", 0 );
	п.Вставить ( "СтатьяДДС", Данные.СтатьяДДС );
	п.Вставить ( "СуммаГривна", 0 );
	п.Вставить ( "СуммаДоллар", 0 );
	п.Вставить ( "СуммаЕвро", 0 );
	Если ( Данные.Валюта = Справочники.Валюты.Гривна ) Тогда
		п.СуммаГривна = Данные.Сумма;
	ИначеЕсли ( Данные.Валюта = Справочники.Валюты.Доллар ) Тогда
		п.СуммаДоллар = Данные.Сумма;
	ИначеЕсли ( Данные.Валюта = Справочники.Валюты.Евро ) Тогда
		п.СуммаЕвро = Данные.Сумма;
	КонецЕсли;
	Возврат п;

КонецФункции

&НаСервереБезКонтекста
Функция получитьЧисло ( Текст )
	
	Возврат Число ( СтрЗаменить ( Текст, " ", "" ) );
	
КонецФункции 

&НаКлиенте
Процедура ГодПриИзменении ( Элемент )
	
	Объект.Год = НачалоГода ( Объект.Год );
	Объект.ДатаНачала = НачалоГода ( Объект.Год ) + ( Объект.ДатаНачала - НачалоГода ( Объект.ДатаНачала ) );  
	Объект.ДатаОкончания = КонецДня ( НачалоГода ( Объект.Год ) + ( Объект.ДатаОкончания - НачалоГода ( Объект.ДатаОкончания ) ) );
	
КонецПроцедуры

&НаКлиенте
Процедура РасходКонтрагентПриИзменении ( Элемент )
	
	заполнитьСтатьюИзКонтрагента ( "Расход" );
	
КонецПроцедуры

&НаКлиенте
Процедура ПриходКонтрагентПриИзменении ( Элемент )
	
	заполнитьСтатьюИзКонтрагента ( "Приход" );
	
КонецПроцедуры

&НаКлиенте
Процедура заполнитьСтатьюИзКонтрагента ( ИмяТЧ )
	
	данные = Элементы [ ИмяТЧ ].ТекущиеДанные;
	Если ( данные <> Неопределено ) Тогда
		Если ( ЗначениеЗаполнено ( данные.Контрагент ) ) Тогда
			данные.СтатьяДДС = получитьСтатьюИзКонтрагента ( данные.Контрагент );
		Иначе
			данные.СтатьяДДС = ПредопределенноеЗначение ( "Справочник.СтатьяДДС.ПустаяСсылка" ); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьСтатьюИзКонтрагента ( Контрагент )
	
	Возврат Контрагент.СтатьяДДС;

КонецФункции

&НаКлиенте
Процедура СтатьяДДСНачалоВыбора ( Элемент, ДанныеВыбора, СтандартнаяОбработка )
	
	имяТЧ = Лев ( Элемент.Имя, 6 );
	данные = Элементы [ имяТЧ ].ТекущиеДанные;
	Если ( данные <> Неопределено ) Тогда
		Если ( ЗначениеЗаполнено ( данные.Контрагент ) ) Тогда
			сз = получитьСтатьи ( данные.Контрагент, Объект.Касса );
			Если ( сз.Количество () = 0 ) Тогда
				Сообщить ( "Не заполнены статьи ДДС по кассе и контрагенту!", СтатусСообщения.Обычное );   
			Иначе
				СтандартнаяОбработка = Ложь;
				п = Новый Структура ();
				п.Вставить ( "ИмяТЧ" ,имяТЧ );
				п.Вставить ( "Идентификатор", данные.ПолучитьИдентификатор () );
				ПоказатьВыборИзСписка ( Новый ОписаниеОповещения ( "ВыборСтатьи", ЭтотОбъект, п), сз, Элемент ); 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтатьи ( ВыбранноеЗначение, Парамы ) Экспорт
	
	Если ( ВыбранноеЗначение <> Неопределено ) Тогда
		строкаТЧ = Объект [ Парамы.ИмяТЧ ].НайтиПоИдентификатору ( Парамы.Идентификатор );
		строкаТЧ.СтатьяДДС = ВыбранноеЗначение.Значение;
		заполнитьДокумент ( Парамы.ИмяТЧ, Элементы [ Парамы.ИмяТЧ ].ТекущаяСтрока );
		заполнитьОстатки ();
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция получитьСтатьи ( Контрагент, Касса )
	
	сз = Новый СписокЗначений ();
	с = "
	|выбрать
	|	СтатьяДДС как СтатьяДДС
	|из
	|	РегистрСведений.СтатьиДДСПоКонтрагентам
	|где
	|	Контрагент = &Контрагент
	|	и Касса = &Касса
	|упорядочить по
	|	СтатьяДДС 
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "Контрагент", Контрагент );
	запрос.УстановитьПараметр ( "Касса", Касса );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	Пока ( выборка.Следующий () ) Цикл
		сз.Добавить ( выборка.СтатьяДДС );	
	КонецЦикла; 
	Возврат сз;

КонецФункции 

&НаСервереБезКонтекста
Функция проверитьКассыТаможняСофия ( Данные )
	
	Возврат ( Данные.Касса.Код = "000000002" И Данные.КассаПеремещение.Код = "000000005" ); // из Касса (Таможня) в Касса (София) 

КонецФункции

&НаСервереБезКонтекста
Функция создатьПеремещениеТаможняМЕ ( Данные )
	
	// расход
	док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент ();
	док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.ПеремещениеВКассу;
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	док.Дата = Данные.Дата;
	док.Контрагент = Справочники.Контрагенты.НайтиПоКоду ( "000001366" ); // контрагент "М.Е."
	док.ДатаОперации = док.Дата;
	док.Касса = Данные.Касса;
	док.КассаПеремещение = Справочники.Кассы.НайтиПоКоду ( "000000004" ); // касса М.Е.
	док.СтатьяДДС = Справочники.СтатьяДДС.ПеремещениеМеждуКассами;
	док.Сумма = Данные.Сумма;
	док.Валюта = Данные.Валюта;
	док.Организация = Данные.Организация;
	док.ДолгПоВалютам = Ложь;
	режим = РежимЗаписиДокумента.Проведение;
	док.ПометкаУдаления = Ложь;
	док.Записать ( режим );
	приход = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент ();
	приход.Заполнить ( док.Ссылка );
	приход.Контрагент = Справочники.Контрагенты.НайтиПоКоду ( "000001379" ); // Таможня
	приход.СтатьяДДС = Справочники.СтатьяДДС.ПеремещениеМеждуКассами;
	приход.Записать ( режим );
	док.ДокументПКО = приход.Ссылка;
	док.Записать ( режим );
	п = заполнитьСтрокуТЧПеремещение ( док );
	Возврат п;

КонецФункции

&НаСервереБезКонтекста
Процедура создатьПеремещениеМЕКассаСофия ( Данные )
	
	// расход
	док = Документы.РасходныйКассовыйОрдер.СоздатьДокумент ();
	док.ВидОперации = Перечисления.ВидОперацииРасходныйКассовыйОрдер.ПеремещениеВКассу;
	док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	док.Дата = Данные.Дата + 1;
	док.Контрагент = Справочники.Контрагенты.НайтиПоКоду ( "000001416" ); // контрагент "София"
	док.ДатаОперации = док.Дата + 1;
	док.Касса = Справочники.Кассы.НайтиПоКоду ( "000000004" ); // касса М.Е.;
	док.КассаПеремещение = Данные.КассаПеремещение;
	док.СтатьяДДС = Справочники.СтатьяДДС.ПеремещениеМеждуКассами;
	док.Сумма = Данные.Сумма;
	док.Валюта = Данные.Валюта;
	док.Организация = Данные.Организация;
	док.ДолгПоВалютам = Ложь;
	режим = РежимЗаписиДокумента.Проведение;
	док.ПометкаУдаления = Ложь;
	док.Записать ( режим );
	приход = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент ();
	приход.Заполнить ( док.Ссылка );
	приход.Контрагент = Справочники.Контрагенты.НайтиПоКоду ( "000001366" ); // контрагент "М.Е."
	приход.СтатьяДДС = Справочники.СтатьяДДС.ПеремещениеМеждуКассами;
	приход.Записать ( режим );
	док.ДокументПКО = приход.Ссылка;
	док.Записать ( режим );
	
КонецПроцедуры 

&НаКлиенте
Процедура ПодчиненныеДокументы ( Команда )
	
	имя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	Если ( имя = "СтраницаПриход" ИЛИ имя = "СтраницаРасход" ) Тогда
		открытьФормуСвязанныеДокументы ( СтрЗаменить ( имя, "Страница", "" ) );	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура открытьФормуСвязанныеДокументы ( Имя )
	
	Если ( Элементы [ Имя ].ВыделенныеСтроки.Количество () > 0 ) Тогда
		данные = Объект [ Имя ].НайтиПоИдентификатору ( Элементы [ Имя ].ВыделенныеСтроки [ 0 ] );   
		ОткрытьФорму ( "КритерийОтбора.СвязанныеДокументы.Форма.Список", Новый Структура ( "ОбъектОтбора", данные.Ссылка ), ЭтаФорма, Новый УникальныйИдентификатор () );	
	КонецЕсли;
		
КонецПроцедуры 