
Процедура ЗагрузитьКурсНБУ ( Параметры = Неопределено ) Экспорт
	
	Если ( Параметры = Неопределено ) Тогда
		заполнитьПараметры ( Параметры );
	КонецЕсли; 
    загрузитьКурс ( Параметры );

КонецПроцедуры

Функция заполнитьПараметры ( Параметры )
	
	Параметры = Новый Структура ();
	Параметры.Вставить ( "ДатаНачала", НачалоДня ( ТекущаяДата () ) - 7 * 24 * 60 * 60 ); // предыдущая неделя
	Параметры.Вставить ( "ДатаОкончания", КонецДня ( ТекущаяДата () ) );
	Параметры.Вставить ( "Валюты", получитьВалюты () );
	
КонецФункции 

Функция получитьВалюты ()
	
	с = "
	|выбрать
	|	Ссылка как Валюта
	|из
	|	Справочник.Валюты
	|где
	|	не ПометкаУдаления
	|	и Ссылка <> значение ( Справочник.Валюты.Гривна )  
	|упорядочить по 
	|	Наименование 
	|";
	запрос = Новый Запрос ( с );
	результат = запрос.Выполнить ();
	Возврат результат.Выгрузить ().ВыгрузитьКолонку ( "Валюта" );

КонецФункции

Процедура загрузитьКурс ( Параметры )
	
	датаЗагрузки = Параметры.ДатаНачала;
	соединение = получитьСоединение ();
	кодыВалют = получитьКодыВалют ( Параметры.Валюты );
	Пока датаЗагрузки <= Параметры.ДатаОкончания Цикл
		суффикс = "&date=" + Формат ( датаЗагрузки, "ДФ=yyyyMMdd" );
		Для Каждого Валюта Из Параметры.Валюты Цикл
			адрес = "NBUStatService/v1/statdirectory/exchange?valcode=" + Прав ( Валюта.КодСимвольный, 3 )+ суффикс;
			ответ = получитьОтвет ( соединение, адрес, кодыВалют );
		КонецЦикла;
		датаЗагрузки = датаЗагрузки + 24 * 60 * 60;
	КонецЦикла;
	
КонецПроцедуры

Функция получитьСоединение ()
	
	Возврат Новый HTTPСоединение ( "bank.gov.ua", , , , , , Новый ЗащищенноеСоединениеOpenSSL () );		

КонецФункции

Функция получитьКодыВалют ( Валюты )
	
	с = "
	|выбрать
	|	КодСимвольный как КодСимвольный,
	|	Ссылка как Валюта
	|из
	|	Справочник.Валюты
	|где
	|	Ссылка в ( &МассивВалюты )  
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "МассивВалюты", Валюты );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	карта = Новый Соответствие ();
	Пока ( выборка.Следующий () ) Цикл
		карта.Вставить ( выборка.КодСимвольный, выборка.Валюта );		
	КонецЦикла; 
	Возврат карта;

КонецФункции 

Функция получитьОтвет ( Соединение, Адрес, КодыВалют )	
	
	ПутьДляСохранения = ПолучитьИмяВременногоФайла ();
	нттрЗапрос = Новый HTTPЗапрос ( Адрес );
	нттрЗапрос.Заголовки.Вставить ( "Accept-Charset", "utf-8" );
 	имяФайла = ПолучитьИмяВременногоФайла ();
	ответ = соединение.Получить ( нттрЗапрос );
	Если ответ.КодСостояния < 200 ИЛИ ответ.КодСостояния >= 300 Тогда
		Сообщить ( "Ошибка получения файла с курсами валют!", СтатусСообщения.Важное );   
	Иначе
		xml = ответ.ПолучитьТелоКакСтроку ();
		Если ( xml <> "" ) Тогда
			данные = прочитатьДанные ( xml );
			записатьКурс ( данные, КодыВалют );
		КонецЕсли; 
	КонецЕсли;
	Возврат Истина;
		
КонецФункции
	
Функция прочитатьДанные ( XML )
	
	чтение = Новый ЧтениеXML ();
	чтение.УстановитьСтроку ( XML );
	п = Новый Структура ();
	п.Вставить ( "Курс" );
	п.Вставить ( "Код" );
	п.Вставить ( "Дата" );
	Пока чтение.Прочитать () Цикл
		Если чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ( чтение.Имя = "rate" ) Тогда
				Если ( чтение.Прочитать () ) Тогда
					п.Курс = СокрЛП ( чтение.Значение );	
				КонецЕсли;				
			ИначеЕсли ( чтение.Имя = "cc" ) Тогда
				Если ( чтение.Прочитать () ) Тогда
					п.Код = СокрЛП ( чтение.Значение );
				КонецЕсли;
			ИначеЕсли ( чтение.Имя = "exchangedate" ) Тогда
				Если ( чтение.Прочитать () ) Тогда
					п.Дата = СокрЛП ( чтение.Значение );
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат п;
	
КонецФункции
			
Процедура записатьКурс ( Данные, КодыВалют )
	
	Если ( Данные.Код = "" ИЛИ Данные.Курс = "" ИЛИ Данные.Дата = ""
			ИЛИ Данные.Код = Неопределено ИЛИ Данные.Курс = Неопределено ИЛИ Данные.Дата = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	период = Дата ( Сред ( Данные.Дата, 7, 4 ), Сред ( Данные.Дата, 4, 2 ), Сред ( Данные.Дата, 1, 2 ) );
	валюта = КодыВалют [ Данные.Код ];
	курс = Число ( Данные.Курс );
	Если ( ЗначениеЗаполнено ( валюта ) ) Тогда
		менеджер = РегистрыСведений.КурсыВалют.СоздатьМенеджерЗаписи ();
		менеджер.Валюта = валюта;
		менеджер.Период = период;
		менеджер.Прочитать ();
		менеджер.Курс = курс;
		менеджер.Валюта = валюта;
		менеджер.Период = период;
		коммерческиеКурсы = получитьКоммерческиеКурсы ( период, валюта );
		менеджер.КурсКоммерческийПокупка = коммерческиеКурсы.КурсКоммерческийПокупка;
		менеджер.КурсКоммерческийПродажа = коммерческиеКурсы.КурсКоммерческийПродажа;
		менеджер.Записать ();
	КонецЕсли; 
	
КонецПроцедуры 

Функция получитьКоммерческиеКурсы ( Период, Валюта )
	
	с = "
	|выбрать
	|	КурсКоммерческийПокупка как КурсКоммерческийПокупка,
	|	КурсКоммерческийПродажа как КурсКоммерческийПродажа
	|из
	|	РегистрСведений.КурсыВалют.СрезПоследних ( &Период, Валюта = &Валюта )   
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "Период", Период );
	запрос.УстановитьПараметр ( "Валюта", Валюта );
	результат = запрос.Выполнить ();
	п = Новый Структура ();
	п.Вставить ( "КурсКоммерческийПокупка", 0 );
	п.Вставить ( "КурсКоммерческийПродажа", 0 );
	Если ( НЕ результат.Пустой () ) Тогда
		выборка = результат.Выбрать ();
		выборка.Следующий ();
		п.КурсКоммерческийПокупка = выборка.КурсКоммерческийПокупка;
		п.КурсКоммерческийПродажа = выборка.КурсКоммерческийПродажа;
	КонецЕсли;	
	Возврат п;

КонецФункции 