
&НаСервере
Процедура ПриСозданииНаСервере ( Отказ, СтандартнаяОбработка )
	
	установитьПараметрСписка ();
	ПериодСреднийКурс = НачалоМесяца ( ТекущаяДата () );
	заполнитьСредниеКурсы ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодСреднийКурсПриИзменении ( Элемент )
	
	ПериодСреднийКурс = НачалоМесяца ( ПериодСреднийКурс );
	заполнитьСредниеКурсы ();
	
КонецПроцедуры

&НаСервере
Процедура заполнитьСредниеКурсы ()
	
	таблицаКурсов = получитьТаблицуКурсов ();
	СреднийКурс.Очистить ();
	строкаДоллар = СреднийКурс.Добавить ();
	строкаДоллар.Валюта = Справочники.Валюты.Доллар;
	строкаЕвро = СреднийКурс.Добавить ();
	строкаЕвро.Валюта = Справочники.Валюты.Евро;
	колвоДней = 0;
	колвоДнейМесяц = День ( КонецМесяца ( ПериодСреднийКурс ) );
	Для Каждого строкаТЗ Из таблицаКурсов Цикл
		Если ( строкаТЗ.Валюта = Справочники.Валюты.Доллар ) Тогда
			строкаТЧ = строкаДоллар;
		ИначеЕсли ( строкаТЗ.Валюта = Справочники.Валюты.Евро ) Тогда
			строкаТЧ = строкаЕвро;
		КонецЕсли; 
		строкаТЧ.Курс = строкаТЧ.Курс + строкаТЗ.Курс * строкаТЗ.КоличествоДней;
		строкаТЧ.КурсКоммерческийПокупка = строкаТЧ.КурсКоммерческийПокупка + строкаТЗ.КурсКоммерческийПокупка * строкаТЗ.КоличествоДней;
		строкаТЧ.КурсКоммерческийПродажа = строкаТЧ.КурсКоммерческийПродажа + строкаТЗ.КурсКоммерческийПродажа * строкаТЗ.КоличествоДней;
		колвоДней = колвоДней + строкаТЗ.КоличествоДней;
	КонецЦикла;
	строкаДоллар.Курс = строкаДоллар.Курс / колвоДнейМесяц;
	строкаДоллар.КурсКоммерческийПокупка = строкаДоллар.КурсКоммерческийПокупка / колвоДнейМесяц;
	строкаДоллар.КурсКоммерческийПродажа = строкаДоллар.КурсКоммерческийПродажа / колвоДнейМесяц;
	строкаЕвро.Курс = строкаЕвро.Курс / колвоДнейМесяц;
	строкаЕвро.КурсКоммерческийПокупка = строкаЕвро.КурсКоммерческийПокупка / колвоДнейМесяц;
	строкаЕвро.КурсКоммерческийПродажа = строкаЕвро.КурсКоммерческийПродажа / колвоДнейМесяц;	
	
КонецПроцедуры 

&НаСервере
Функция получитьТаблицуКурсов ()
	
	с = "
	|выбрать
	|	началопериода ( Период, день ) как Период,
	|	Валюта как Валюта,
	|	среднее ( Курс ) как Курс,
	|	среднее ( КурсКоммерческийПокупка ) как КурсКоммерческийПокупка,
	|	среднее ( КурсКоммерческийПродажа ) как КурсКоммерческийПродажа
	|поместить ВТСредниеКурсы	 
	|из
	|	РегистрСведений.КурсыВалют как КурсыВалютДвижения
	|где
	|	Период >= &ДатаНачала
	|	и Период <= &ДатаОкончания
	|	и Валюта в ( &МассивВалют )
	|сгруппировать по
	|	началопериода ( Период, день ), Валюта 
	|;	
	|выбрать
	|	&ДатаНачала как ПериодНачало,
	|	Валюта как Валюта,
	|	Курс как Курс,
	|	КурсКоммерческийПокупка как КурсКоммерческийПокупка,
	|	КурсКоммерческийПродажа как КурсКоммерческийПродажа
	|поместить ВТаблица
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних ( &ДатаНачала, Валюта в ( &МассивВалют ) )
	|
	|объединить все
	|
	|выбрать
	|	Период как ПериодНачало,
	|	Валюта как Валюта,
	|	Курс как Курс,
	|	КурсКоммерческийПокупка как КурсКоммерческийПокупка,
	|	КурсКоммерческийПродажа как КурсКоммерческийПродажа
	|	 
	|из
	|	ВТСредниеКурсы 
    |;
    |ВЫБРАТЬ
    |	ВТаблица.ПериодНачало как ПериодНачало,
    |	естьnull ( добавитькдате ( минимум ( ВТСредниеКурсы.Период ), секунда, - 1 ), &ДатаОкончания ) как ПериодКонец,
	|	( разностьдат ( ВТаблица.ПериодНачало, естьnull ( добавитькдате ( минимум ( ВТСредниеКурсы.Период ), секунда, - 1 ), &ДатаОкончания ), день ) + 1 ) как КоличествоДней,  
    |	ВТаблица.Валюта как Валюта,
    |	естьnull ( ВТаблица.Курс, 1 ) как Курс,
    |	естьnull ( ВТаблица.КурсКоммерческийПокупка, 1 ) как КурсКоммерческийПокупка,
	|	естьnull ( ВТаблица.КурсКоммерческийПродажа, 1 ) как КурсКоммерческийПродажа
    |из
    |	ВТаблица как ВТаблица
    |		левое соединение ВТСредниеКурсы как ВТСредниеКурсы
    |		по ВТаблица.ПериодНачало < ВТСредниеКурсы.Период
    |			и ВТаблица.Валюта = ВТСредниеКурсы.Валюта
    |сгруппировать по
    |	ВТаблица.ПериодНачало,
    |	ВТаблица.Валюта,
    |	ВТаблица.Курс,
    |	ВТаблица.КурсКоммерческийПокупка,
	|	ВТаблица.КурсКоммерческийПродажа
	|упорядочить по 
	|	ПериодНачало, Валюта 
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "ДатаНачала", НачалоМесяца ( ПериодСреднийКурс ) );
	запрос.УстановитьПараметр ( "ДатаОкончания", КонецМесяца ( ПериодСреднийКурс ) );
	м = Новый Массив ();
	м.Добавить ( Справочники.Валюты.Доллар );
	м.Добавить ( Справочники.Валюты.Евро );
	запрос.УстановитьПараметр ( "МассивВалют", м );
	Возврат запрос.Выполнить ().Выгрузить ();

КонецФункции 

&НаКлиенте
Процедура ПриОткрытии ( Отказ )
	
	Элементы.ФормаТекущийКурс.Пометка = Ложь;
	ОбновитьСписок ();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписок () Экспорт
	
	Если ( Элементы.ФормаТекущийКурс.Пометка ) Тогда
		Список.ОсновнаяТаблица = "РегистрСведений.КурсыВалют.СрезПоследних";
	Иначе
		Список.ОсновнаяТаблица = "РегистрСведений.КурсыВалют";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийКурс ( Команда )
	
	Элементы.ФормаТекущийКурс.Пометка = НЕ Элементы.ФормаТекущийКурс.Пометка;
	ОбновитьСписок ();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении ( Элемент )
	
	заполнитьСредниеКурсы ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСреднийКурс ( Команда )
	
	заполнитьСредниеКурсы () 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel ( Команда )
	
	результат = получитьМакетExcel ();
	п = Новый Структура ();
	п.Вставить ( "Результат", результат );
	п.Вставить ( "Фильтр", "Microsoft Excel (*.xlsx)|*.xlsx" );
	п.Вставить ( "ТипФайла", ТипФайлаТабличногоДокумента.XLSX );
	РаботаСФайлами.СохранитьДокументВФайл ( п );
	
КонецПроцедуры

&НаСервере
Функция получитьМакетExcel ()
	
	Возврат ОбщийДокументы.ВывестиСписок ( Элементы.Список );
	
КонецФункции

&НаСервере
Процедура установитьПараметрСписка ()
	
	Список.Параметры.УстановитьЗначениеПараметра ( "ВалютаОтбор", ВалютаОтбор );
	Элементы.Список.Обновить ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОтборПриИзменении ( Элемент )
	
	установитьПараметрСписка ();
	
КонецПроцедуры