
&НаКлиенте
Процедура СохранитьДокументВФайл ( Параметры ) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами ( Новый ОписаниеОповещения ( "ПодключениеРасширенияРаботыСФайлами", ЭтотОбъект, Параметры ) );

КонецПроцедуры 

&НаКлиенте
Процедура ПодключениеРасширенияРаботыСФайлами ( Подключено, Параметры ) Экспорт
	
	Если ( Подключено ) Тогда
		выбратьФайлы ( Параметры );
	Иначе
		НачатьУстановкуРасширенияРаботыСФайлами  ( Новый ОписаниеОповещения ( "УстановкаРасширенияРаботыСФайлами", ЭтотОбъект, Параметры ) );	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайлами ( Результат, Параметры ) Экспорт
	
	выбратьФайлы ( Параметры );
	
КонецПроцедуры

&НаКлиенте
Процедура выбратьФайлы ( Параметры )
	
	диалог = Новый ДиалогВыбораФайла ( РежимДиалогаВыбораФайла.Сохранение );
	диалог.МножественныйВыбор = ЛОЖЬ;
	диалог.Фильтр = Параметры.Фильтр;
	диалог.Показать ( Новый ОписаниеОповещения ( "ВыборФайла", ЭтотОбъект, Параметры ) ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла ( Файлы, Параметры ) Экспорт
	
	Если ( Файлы = Неопределено ) Тогда
		Возврат;
	Иначе
		Параметры.Вставить ( "ИмяФайла", Файлы [ 0 ] );  
		сохранитьДокумент ( Параметры );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура сохранитьДокумент ( Параметры )
	
	Если ( Параметры.Свойство ( "Результат" ) ) И ( ТипЗнч ( Параметры.Результат ) = Тип ( "ТабличныйДокумент" ) ) Тогда
		сохранитьТабличныйДокумент ( Параметры );
	Иначе
		сохранитьXLSМакет ( Параметры );	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура сохранитьТабличныйДокумент ( Параметры )
	
	табличныйДокумент = Параметры.Результат;
	Если ( Параметры.Свойство ( "ТипФайла" ) ) Тогда
		типФайла = Параметры.ТипФайла;
	Иначе
		типФайла = ТипФайлаТабличногоДокумента.MXL;
	КонецЕсли; 
	табличныйДокумент.НачатьЗапись ( Новый ОписаниеОповещения ( "ПоказатьОповещение", ЭтотОбъект ), Параметры.ИмяФайла, типФайла );
	// табличныйДокумент.Записать ( Параметры.ИмяФайла, типФайла );
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОповещение ( Результат, Параметры ) Экспорт
	
	ПоказатьОповещениеПользователя ( "", , "Файл записан!", БиблиотекаКартинок.СохранитьФайл );	
	
КонецПроцедуры 

&НаКлиенте
Процедура сохранитьXLSМакет ( Параметры )
	
	Если ( Параметры.Свойство ( "Адрес" ) ) Тогда
		данные = ПолучитьИзВременногоХранилища ( Параметры.Адрес );
		данные.Записать ( Параметры.ИмяФайла );
		ПоказатьОповещениеПользователя ( "", , "Файл записан!", БиблиотекаКартинок.СохранитьФайл );
	КонецЕсли;
	
КонецПроцедуры 


&НаКлиенте 
Процедура Подготовить ( ПроцедураВозврата ) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами ( Новый ОписаниеОповещения ( "ПодключитьРасширение", ЭтотОбъект, ПроцедураВозврата ) );
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасширение ( Подключено, ПроцедураВозврата ) Экспорт
	
	Если ( Подключено ) Тогда
		ВыполнитьОбработкуОповещения ( ПроцедураВозврата );
	Иначе
		НачатьУстановкуРасширенияРаботыСФайлами ( Новый ОписаниеОповещения ( "УстановитьРасширение", ЭтотОбъект, ПроцедураВозврата ) );
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширение ( ПроцедураВозврата ) Экспорт
	
	Подготовить ( ПроцедураВозврата );
	
КонецПроцедуры

&НаСервере
Функция ОпределитьФайлы ( Основание ) Экспорт 
	
	наборЗаписей = РегистрыСведений.Файлы.СоздатьНаборЗаписей ();
	наборЗаписей.Отбор.Объект.Установить ( Основание );
	наборЗаписей.Прочитать ();
	Возврат наборЗаписей.Количество ();
	
КонецФункции

&НаСервере
Процедура ПриКопированииОбъекта ( Источник, Приемник ) Экспорт
	
	Если ( ЗначениеЗаполнено ( Источник ) И ЗначениеЗаполнено ( Приемник ) ) Тогда
		наборИсточник = РегистрыСведений.Файлы.СоздатьНаборЗаписей ();
		наборИсточник.Отбор.Объект.Установить ( Источник );
		наборИсточник.Прочитать ();
		наборПриемник = РегистрыСведений.Файлы.СоздатьНаборЗаписей ();
		наборПриемник.Отбор.Объект.Установить ( Приемник );
		наборПриемник.Прочитать ();
		наборПриемник.Очистить ();
		Для Каждого запись Из наборИсточник Цикл
			новаяЗапись = наборПриемник.Добавить ();
			ЗаполнитьЗначенияСвойств ( новаяЗапись, запись );
			новаяЗапись.Объект = Приемник;			
		КонецЦикла;
		ошибка = ЛОЖЬ;
		Для Каждого запись Из наборПриемник Цикл
			Если ( НЕ ЗначениеЗаполнено ( запись.Объект ) ) Тогда
				ошибка = ИСТИНА;
			КонецЕсли;			
		КонецЦикла;
		Если ( НЕ ошибка ) Тогда
			наборПриемник.Записать ();			
		КонецЕсли; 
	КонецЕсли;
	хранениеФайлов = Константы.ХранениеФайлов.Получить ();
	путьИсточник = хранениеФайлов + "\" + Источник.УникальныйИдентификатор ();
	путьПриемник = хранениеФайлов + "\" + Приемник.УникальныйИдентификатор ();
	СоздатьКаталог ( путьПриемник );
	файлы = НайтиФайлы ( путьИсточник, "*.*" );
	Для Каждого найденныйФайл Из файлы Цикл
		КопироватьФайл ( найденныйФайл.ПолноеИмя, путьПриемник + "\" + найденныйФайл.Имя );
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьФайл ( Приемник = Неопределено, ИмяФайла, ТекущийПользователь = Неопределено ) Экспорт
	
	Если Приемник = Неопределено ИЛИ НЕ ЗначениеЗаполнено ( Приемник ) Тогда
		Возврат;
	КонецЕсли;
	папка = создатьПапку ( Приемник );
	файл = Новый Файл ( ИмяФайла );
	имя = НРЕГ ( файл.ИмяБезРасширения );
	расширение = НРЕГ ( файл.Расширение );
	записьСуществует = получитьЗапись ( Приемник, имя, расширение );
	Если ( записьСуществует ) Тогда
		Сообщить ( "Уже существует запись! Объект - " + Приемник + ", имя файла - " + имя + ", расширение - " + расширение + ".", СтатусСообщения.Информация );
		Возврат;
	КонецЕсли; 
	новыйФайл = Новый Файл ( Константы.ХранениеФайлов.Получить () + "\" + папка + "\" + файл.Имя );
	Если ( новыйФайл.Существует () ) Тогда
		Сообщить ( "Уже прикреплён файл с таким именем! Объект - " + Приемник + ", имя файла - " + имя + ", расширение - " + расширение + ".", СтатусСообщения.Информация );   
		Возврат;
	КонецЕсли;
	набор = РегистрыСведений.Файлы.СоздатьНаборЗаписей ();
	набор.Отбор.Объект.Установить ( Приемник );
	набор.Прочитать ();
	запись = набор.Добавить ();
	запись.Объект = Приемник;
	запись.ИмяФайла = имя;
	запись.Расширение = расширение;
	запись.Дата = ТекущаяДата ();
	запись.Размер = ( файл.Размер () / 1024 );
	Если ( ТекущийПользователь = Неопределено ) Тогда
		запись.Автор = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;	
	запись.Папка = папка;
	набор.Записать ();
	КопироватьФайл ( ИмяФайла, новыйФайл.ПолноеИмя );
	
КонецПроцедуры

&НаСервере
Функция получитьЗапись ( Объект, ИмяФайла, Расширение )
	
	стр = "
	|ВЫБРАТЬ 1
	|ИЗ РегистрСведений.Файлы КАК Файлы
	|ГДЕ Объект = &Объект И ИмяФайла = &ИмяФайла И Расширение = &Расширение
	|";
	запрос = Новый Запрос ( стр );
	запрос.УстановитьПараметр ( "Объект", Объект );
	запрос.УстановитьПараметр ( "ИмяФайла", ИмяФайла );
	запрос.УстановитьПараметр ( "Расширение", Расширение );
	Возврат НЕ запрос.Выполнить ().Пустой ();

КонецФункции 

&НаСервере
Функция создатьПапку ( Приемник )
	
	идентификатор = Приемник.УникальныйИдентификатор ();
	папка = Константы.ХранениеФайлов.Получить () + "\" + идентификатор;
	каталог = Новый Файл ( папка );
	Если ( каталог.Существует () ) Тогда
		// код ...  
	Иначе
		СоздатьКаталог ( каталог.ПолноеИмя );
	КонецЕсли;
	Возврат идентификатор;
	
КонецФункции 

&НаСервере
Функция ЗагрузитьEXCEL ( Знач ФайлEXCEL, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокФайла = 0 ) Экспорт  
	
	Перем ТабличныйДокумент, КонечнаяКолонка, ИмяКолонки, Область, ТекущаяОбласть, нСтрока, нКолонка, НоваяСтрокаТФ, ЗначениеЯчейки;
	Перем ТаблицаРезультат;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать ( ФайлEXCEL, СпособЧтенияЗначенийТабличногоДокумента.Значение );    // СпособЧтенияЗначенийТабличногоДокумента - новый параметр платформы 8.3.6. Второе значение "Текст".
	Исключение
		Сообщить ( ОписаниеОшибки (), СтатусСообщения.Внимание );
		Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
	КолвоСтрокФайла = ТабличныйДокумент.ВысотаТаблицы;
	КонечнаяКолонка = ТабличныйДокумент.ПолучитьОбласть ().ШиринаТаблицы;
	
	// Проверка заполненности листа.
	Если КолвоСтрокФайла = 0 Тогда
		// Завершение работы.
		// Закрытие Объектов.
		ТабличныйДокумент = Неопределено;
		Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
	КонецЕсли;
	
	// Создание результирующей таблицы, в которую будут записываться считанные из файла данные.
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	// Формирование колонок результирующей таблицы.
	
	// "НомерСтроки" - для наглядности и удобства.
	// В зависимости от разрабатываемой обработки.
	// "Сопоставлено" - может быть другим.
	// Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла.
	ТаблицаРезультат.Колонки.Добавить ( "НомерСтроки", Новый ОписаниеТипов ( "Число" ), "№", 4 );
	ТаблицаРезультат.Колонки.Добавить ( "Сопоставлено", Новый ОписаниеТипов ( "Булево" ), "Сопоставлено", 1 );
	
	Для ит = 1 ПО КонечнаяКолонка Цикл
		нКолонка = СтрЗаменить ( ит, Символы.НПП, "" );
		ИмяКолонки = "N" + нКолонка;
		ТаблицаРезультат.Колонки.Добавить ( ИмяКолонки );
	КонецЦикла;
	
	// 1-я строка. Заголовки.
	НоваяСтрокаТФ = ТаблицаРезультат.Добавить ();
	НоваяСтрокаТФ.НомерСтроки = 1;
	Для ит = 1 ПО КонечнаяКолонка Цикл
		нКолонка = СтрЗаменить ( ит, Символы.НПП, "" );
		ИмяКолонки = "N" + нКолонка;
		НоваяСтрокаТФ [ ИмяКолонки ] = ТабличныйДокумент.ПолучитьОбласть ( "R1" + "C" + нКолонка ).ТекущаяОбласть.Текст;
		
		// Используется при формировании таблицы на форме обработки.
		ШиринаКолонки = ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина;
		ДлинаСтроки = СтрДлина ( СокрЛП ( НоваяСтрокаТФ [ ИмяКолонки ] ) );
		ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина = ? ( ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки );
	КонецЦикла;
	
	НачСтрока = ? ( НачСтрока = 0, 2, НачСтрока );
	КонСтрока = ? ( КонСтрока = 0, КолвоСтрокФайла, КонСтрока );
	
	Для нСтрока = НачСтрока ПО КонСтрока Цикл
		НоваяСтрокаТФ = ТаблицаРезультат.Добавить ();
		НоваяСтрокаТФ [ 0 ] = нСтрока;
		Для ит = 1 ПО КонечнаяКолонка Цикл
			нКолонка = СтрЗаменить ( ит, Символы.НПП, "" );
			Область = ТабличныйДокумент.ПолучитьОбласть ( "R" + СтрЗаменить ( нСтрока, Символы.НПП, "" ) + "C" + нКолонка );
			ТекущаяОбласть = Область.ТекущаяОбласть;
			Попытка
				ЗначениеЯчейки = ТекущаяОбласть.Значение;        // Число, Дата.
			Исключение
				ЗначениеЯчейки = СокрЛП ( ТекущаяОбласть.Текст );    // Строка, Булево. (Булево как строка "ИСТИНА"/"ЛОЖЬ")
				Если ЗначениеЗаполнено ( ЗначениеЯчейки ) Тогда
					ЗначениеЯчейки = ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С ( ЗначениеЯчейки );
					Если ТипЗнч ( ЗначениеЯчейки ) = Тип ( "Строка" ) Тогда
						ЗначениеЯчейки = СокрЛП ( ЗначениеЯчейки );
					КонецЕсли;
				Иначе
					ЗначениеЯчейки = Неопределено;
					Если Область.Рисунки.Количество () > 0 Тогда    // Изображение.
						ЗначениеЯчейки = ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками ( Область, нСтрока, нКолонка, "УИД" );
					КонецЕсли;
				КонецЕсли;
			КонецПопытки;
			
			ИмяКолонки = "N" + нКолонка;
			НоваяСтрокаТФ [ ИмяКолонки ] = ЗначениеЯчейки;
			
			// Используется при формировании таблицы на форме обработки.
			ШиринаКолонки = ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина;
			ДлинаСтроки = СтрДлина ( СокрЛП ( НоваяСтрокаТФ [ ИмяКолонки ] ) );
			ТаблицаРезультат.Колонки [ ИмяКолонки ].Ширина = ? ( ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки );
		КонецЦикла;
	КонецЦикла;
	
	// Юзабилити. Удалить пустые колонки.
	УдалитьКолонкиСНулевойШириной ( ТаблицаРезультат );
	удалитьФайл ( ФайлEXCEL );
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Процедура УдалитьКолонкиСНулевойШириной ( ТаблицаРезультат )
	
	Перем МассивПустыхКолонок;
	
	// Найдем пустые колонки.
	МассивПустыхКолонок = Новый Массив;
	Для Каждого Колонка ИЗ ТаблицаРезультат.Колонки Цикл
		Если Колонка.Ширина = 0 Тогда
			МассивПустыхКолонок.Добавить ( Колонка.Имя );
		КонецЕсли;
	КонецЦикла;
	
	// Удалим пустые колонки.
	Для Каждого ПустаяКолонка ИЗ МассивПустыхКолонок Цикл
		ТаблицаРезультат.Колонки.Удалить ( ПустаяКолонка );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьПростоеЗначениеИзСтрокиВТипизованноеЗначение1С ( Знач ИсходноеЗначение )
	
	Если НЕ ИсходноеЗначение = "" Тогда
		Если ТолькоЦифрыИЗапятаяВСтроке ( ИсходноеЗначение, Истина, Ложь ) Тогда
			Попытка
				Возврат Число ( ИсходноеЗначение );
			Исключение
				Возврат ИсходноеЗначение
			КонецПопытки;
		Иначе
			Если ВРег ( ИсходноеЗначение ) = "ИСТИНА" ИЛИ ВРег ( ИсходноеЗначение ) =  ( "ИСТИНА" + Символы.ПС ) ИЛИ ВРег ( ИсходноеЗначение ) = "TRUE" ИЛИ ВРег ( ИсходноеЗначение ) = ( "TRUE" + Символы.ПС ) Тогда
				Возврат Истина;
			ИначеЕсли ВРег ( ИсходноеЗначение ) = "ЛОЖЬ" ИЛИ  ВРег ( ИсходноеЗначение ) = ( "ЛОЖЬ" + Символы.ПС ) ИЛИ ВРег ( ИсходноеЗначение ) = "FALSE" ИЛИ ВРег ( ИсходноеЗначение ) = ( "FALSE" + Символы.ПС ) Тогда
				Возврат Ложь;
			Иначе
				Возврат ПреобразоватьИзСтрокиВДату ( ИсходноеЗначение );
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсходноеЗначение
	
КонецФункции

&НаСервере
Функция ТолькоЦифрыИЗапятаяВСтроке ( Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина )
	
	Если ТипЗнч ( СтрокаПроверки ) <> Тип ( "Строка" ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить ( СтрокаПроверки, " ", "" );
	КонецЕсли;
	
	Если Сред ( СтрокаПроверки, 1, 1 ) = "-" Тогда
		СтрокаПроверки = Сред ( СтрокаПроверки, 2, СтрДлина ( СтрокаПроверки ) );
	КонецЕсли;
	
	Если ПустаяСтрока ( СтрокаПроверки ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку
		Пока Сред ( СтрокаПроверки, Позиция, 1 ) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред ( СтрокаПроверки, Позиция );
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы
	Возврат СтрДлина ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( СтрЗаменить ( 
	СтрокаПроверки, "0", "" ), "1", "" ), "2", "" ), "3", "" ), "4", "" ), "5", "" ), "6", "" ), "7", "" ), "8", "" ), "9", "" ), ",", "" ) ) = 0;
	
КонецФункции

&НаСервере
Функция ПреобразоватьИзСтрокиВДату ( Знач СтрокаДаты )
	
	Перем ScrptCtrl, OutDate;
	
	Попытка
		ScrptCtrl = Новый COMОбъект ( "MSScriptControl.ScriptControl" );
		ScrptCtrl.Language = "vbscript";
		OutDate = ScrptCtrl.Eval ( "CDate(""" + СтрокаДаты + """)" );
		Возврат OutDate;
	Исключение
		//Сообщить ( ОписаниеОшибки () );
	КонецПопытки;
	
	Возврат СтрокаДаты;
	
КонецФункции 

&НаСервере
Функция ПолучитьЗначениеЯчейкиОбластиТабличногоДокументаСКартинками ( Знач Область, Знач нСтрока, Знач нКолонка, Знач ПравилоИмяФайлаКартинки = "УИД" )
	
	Перем Рисунок, ит, ИмяФайлаРисунка;
	Перем ЗначениеЯчейки;
	
	ит = 0;
	ЗначениеЯчейки = "";
	Для Каждого Рисунок ИЗ Область.Рисунки Цикл
		ит = ит + 1;
		Если ПравилоИмяФайлаКартинки = "УИД" Тогда
			ИмяФайлаРисунка = КаталогВременныхФайлов () + Новый УникальныйИдентификатор () + ".jpg";
		Иначе
			ИмяФайлаРисунка = КаталогВременныхФайлов () + "С" + нСтрока + "К" + нКолонка + ".jpg";
		КонецЕсли;
		Попытка
			Рисунок.Картинка.Записать ( ИмяФайлаРисунка );
			ЗначениеЯчейки = ЗначениеЯчейки + ИмяФайлаРисунка + ? ( ит < Область.Рисунки.Количество (), Символы.ПС, "" );
		Исключение
			// Поле картинки недоступно для чтения.
		КонецПопытки;
	КонецЦикла;
	
	Возврат ЗначениеЯчейки;
	
КонецФункции

&НаСервере
Процедура УдалитьФайл ( ИмяФайла ) Экспорт 
	
	Если ( ИмяФайла = Неопределено ИЛИ ПустаяСтрока ( ИмяФайла ) ) Тогда
		Возврат;
	КонецЕсли;
	ф = Новый Файл ( ИмяФайла );
	Если ( ф.Существует () ) Тогда
		УдалитьФайлы ( ИмяФайла );
	КонецЕсли; 
	
КонецПроцедуры