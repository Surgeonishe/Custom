
&НаСервере 
Функция ОрганизацияПоУмолчанию () Экспорт 
	
	стр = "
	|ВЫБРАТЬ Ссылка КАК Ссылка, Код КАК Код, Наименование КАК Наименование, КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|		 АдресФизический КАК АдресФизический, АдресЮридический КАК АдресЮридический, Телефон КАК Телефон, Факс КАК Факс
	|ИЗ Справочник.Организации
	|ГДЕ Код = &Код
	|";
	запрос = Новый Запрос ( стр );
	запрос.УстановитьПараметр ( "Код", "000000001" );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	выборка.Следующий ();
	Возврат выборка;

КонецФункции 

&НаКлиенте
Процедура РассчитатьСумму ( Данные ) Экспорт 
	
	Данные.Сумма = Данные.Количество * Данные.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦену ( Данные ) Экспорт
	
	Если ( Данные.Количество = 0 ) Тогда
		Данные.Цена = 0;
	Иначе
		Данные.Цена = Данные.Сумма / Данные.Количество;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура НачальноеЗаполнение ( ДокументОбъект ) Экспорт
	
	запрос = Новый Запрос ( "ВЫБРАТЬ ВалютаУчета КАК Валюта ИЗ Константы" );
	результат = запрос.Выполнить ();
	выборка = результат.Выбрать ();
	выборка.Следующий ();
	Если ( ЗначениеЗаполнено ( ДокументОбъект.Валюта ) ) Тогда
		// код ...
	Иначе
		ДокументОбъект.Валюта = выборка.Валюта;
	КонецЕсли; 
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;	
	
КонецПроцедуры

&НаСервере
Функция СгруппироватьМассив ( Данные ) Экспорт 
	
	тз = Новый ТаблицаЗначений ();
	тз.Колонки.Добавить ( "Колонка1" );
	Для Каждого элемент Из Данные Цикл
		новаяСтрока = тз.Добавить ();
		новаяСтрока.Колонка1 = элемент;
	КонецЦикла;
	тз.Свернуть ( "Колонка1" );
	Возврат тз.ВыгрузитьКолонку ( "Колонка1" );

КонецФункции

&НаСервере 
Функция МассивВСтроку ( Данные, Разделитель ) Экспорт 
	
	с = "";
	Для Каждого элемент Из Данные Цикл
		с = с + Разделитель + " " + элемент;
	КонецЦикла; 
	Возврат Прав ( с, ( СтрДлина ( с ) - 2 ) );
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизит ( Реквизит, Данные ) Экспорт 
	
	Возврат Данные [ Реквизит ];

КонецФункции 

&НаСервере
Функция ПолучитьКурс ( Период, Валюта ) Экспорт
	
	курсы = Новый Структура ();
	курсы.Вставить ( "Курс", 0 );
	курсы.Вставить ( "КурсКоммерческийПокупка", 0 );
	курсы.Вставить ( "КурсКоммерческийПродажа", 0 );
	стр = "
	|выбрать 
	|	Курс как Курс, КурсКоммерческийПокупка как КурсКоммерческийПокупка,
	|	КурсКоммерческийПродажа как КурсКоммерческийПродажа  
	|из 
	|	РегистрСведений.КурсыВалют.СрезПоследних ( &Период, Валюта = &Валюта )  
	|";
	запрос = Новый Запрос ( стр );
	запрос.УстановитьПараметр ( "Период", Период );
	запрос.УстановитьПараметр ( "Валюта", Валюта );
	результат = запрос.Выполнить ();
	Если ( НЕ результат.Пустой () ) Тогда
		выборка = результат.Выбрать ();
		выборка.Следующий ();
		ЗаполнитьЗначенияСвойств ( курсы, выборка ); 	
	КонецЕсли; 
	Возврат курсы;

КонецФункции

&НаСервере  
Процедура ОчиститьУслуги ( Таблица, УчитыватьРучнойВвод = ЛОЖЬ ) Экспорт
	
	Если ( УчитыватьРучнойВвод ) Тогда
		индекс = 0;
		Пока индекс <= ( Таблица.Количество () - 1 ) Цикл
			строкаТЧ = Таблица [ индекс ];  
			Если ( строкаТЧ.РучнойВвод ) Тогда
				индекс = индекс + 1;
			Иначе
				Таблица.Удалить ( строкаТЧ );
			КонецЕсли;
		КонецЦикла; 
	Иначе
		Таблица.Очистить ();
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьНомер ( Номер ) Экспорт
	
	н = Номер;
	Пока ИСТИНА Цикл
		Если ( Сред ( н, 1, 1 ) = "0" ) Тогда
			н = Прав ( н, СтрДлина ( н ) - 1 );	
		Иначе
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Возврат н;

КонецФункции 

&НаСервере
Функция ВывестиСписок ( Список ) Экспорт 
	
	схема = Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных ();
	настройки = Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных ();
	компоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных ();
	макетКомпоновки = компоновщикМакета.Выполнить ( схема, настройки );
	процессорКомпоновки = Новый ПроцессорКомпоновкиДанных ();
	процессорКомпоновки.Инициализировать ( макетКомпоновки );
	процессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент ();
	Возврат процессорВывода.Вывести ( процессорКомпоновки );

КонецФункции

&НаСервере 
Процедура ВывестиВЖурналРегистрации ( Объект, ТекстСообщения, Данные  ) Экспорт 
	
	ЗаписьЖурналаРегистрации ( Объект, УровеньЖурналаРегистрации.Информация, , Данные, ТекстСообщения );
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемФормы ( Форма, Отказ, ТекстПредупреждения ) Экспорт
	
	Отказ = Истина;
	ТекстПредупреждения = "Необходимо сохранить данные и закрыть все активные окна,
	|иначе возможно потеря данных! 
	|";	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОповещениеОСменеПароля () Экспорт  
	
	навСсылка = "";
	с = "Для изменения пароля 
	|необходимо нажать Ctrl+Shift+F10.";
	ПоказатьОповещениеПользователя ( "Информация", навСсылка, с, БиблиотекаКартинок.КонтрольДоступа  ); 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогКолонки ( Форма ) Экспорт
	
	сумма = 0;
	Если ( Форма.ТекущийЭлемент.Имя = "Список" ) Тогда
		список = Форма.Элементы.Список;
		текущийЭлемент = список.ТекущийЭлемент;	
		Если ( текущийЭлемент <> Неопределено ) Тогда
			колонка = текущийЭлемент.Имя;
			Если ( СтрНайти ( колонка, "Сумма" ) > 0 ) Тогда
				Для Каждого док Из список.ВыделенныеСтроки Цикл
					данные = список.ДанныеСтроки ( док );
					сумма = сумма + данные [ колонка ];  
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Форма.Элементы.СуммаИтог.Заголовок = "= " + Формат ( сумма, "ЧДЦ=2; ЧН=' '" );
	
КонецПроцедуры 

&НаСервере 
Функция ПолучитьСотрудникаПользователя ( Пользователь )
	
	с = "
	|выбрать первые 1
	|	Ссылка как Сотрудник
	|из
	|	Справочник.Сотрудники 
	|где
	|	Пользователь = &Пользователь  
	|";
	запрос = Новый Запрос ( с );
	запрос.УстановитьПараметр ( "Пользователь", Пользователь );
	результат = запрос.Выполнить ();
	сотрудник = Справочники.Сотрудники.ПустаяСсылка ();
	Если ( НЕ результат.Пустой () ) Тогда
		выборка = результат.Выбрать ();
		выборка.Следующий ();
		сотрудник = выборка.Сотрудник;
	КонецЕсли;	
	Возврат сотрудник;

КонецФункции  

&НаСервере 
Процедура ПередЗаписьюДокумента ( Источник, Отказ ) Экспорт
	
	Если ( Источник.ПометкаУдаления ) Тогда
		РегистрыСведений.Оформление.УдалитьЗаписи ( Источник.Ссылка );		
	КонецЕсли; 
	
КонецПроцедуры

#область КомментарииВСтроках

&НаСервере 
Процедура СоздатьРеквизитыКомментарий ( Форма, ИмяТЧ ) Экспорт
	
	м = Новый Массив ();
	описаниеТипа = получитьОписаниеТипа ();
	колонкиТЧ = Форма.Объект.Ссылка.Метаданные ().ТабличныеЧасти [ ИмяТЧ ].Реквизиты;
	Для Каждого колонка Из колонкиТЧ Цикл
		Если ( Лев ( колонка.Имя, 5 ) = "Сумма" ) Тогда
			м.Добавить ( Новый РеквизитФормы ( колонка.Имя + "Комментарий", описаниеТипа, "Объект." + ИмяТЧ, колонка.Синоним + " (комментарий)" ) );	
		КонецЕсли; 	
	КонецЦикла; 
	Форма.ИзменитьРеквизиты ( м );
	Для Каждого реквизит Из м Цикл
		элемент = Форма.Элементы.Добавить ( реквизит.Имя, Тип ( "ПолеФормы" ), Форма.Элементы [ ИмяТЧ + "Комментарии" ] );
		элемент.ПутьКДанным = "Объект." + ИмяТЧ + "." + реквизит.Имя;
		элемент.Вид = ВидПоляФормы.ПолеВвода;
		добавитьОформление ( Форма, ИмяТЧ, реквизит );
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере 
Процедура добавитьОформление ( Форма, ИмяТЧ, Реквизит )
	
	элемент = Форма.УсловноеОформление.Элементы.Добавить ();	
	отбор = элемент.Отбор.Элементы.Добавить ( Тип ( "ЭлементОтбораКомпоновкиДанных" ) );
	отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных ( "Объект." + ИмяТЧ + "." + Реквизит.Имя );
	отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	отбор.Использование = Истина;
	элемент.Оформление.УстановитьЗначениеПараметра ( "ЦветФона", ЦветаСтиля.ЦветФонаПодсказки );
	элемент.Оформление.УстановитьЗначениеПараметра ( "Шрифт", Новый Шрифт ( , , Истина, ) );
	элемент.Использование = Истина;
	поле = элемент.Поля.Элементы.Добавить ();
	имяСумма = СтрЗаменить ( Реквизит.Имя, "Комментарий", "" );
	поле.Поле = Новый ПолеКомпоновкиДанных ( ИмяТЧ + имяСумма );
	поле.Использование = Истина;
	
КонецПроцедуры 

&НаСервере 
Функция получитьОписаниеТипа ()
	
	кс = Новый КвалификаторыСтроки ( 0 );
	м = Новый Массив ();
	м.Добавить ( кс );
	Возврат Новый ОписаниеТипов ( м, , , , кс );
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитКомментарий ( Форма, ИмяТЧ ) Экспорт 
	
	Для Каждого строкаТЧ Из Форма.Объект [ ИмяТЧ ] Цикл
		Если ( строкаТЧ.Комментарий <> "" ) Тогда
			карта = получитьКомментарииПоСтроке ( строкаТЧ.Комментарий );
			Для Каждого элемент Из карта Цикл
				строкаТЧ [ элемент.Ключ + "Комментарий" ] = элемент.Значение;				
			КонецЦикла; 
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры  

&НаКлиенте 
Процедура ДобавитьКомментарий ( Форма, ИмяТЧ ) Экспорт
	
	тч = Форма.Элементы [ ИмяТЧ ];
	данные = тч.ТекущиеДанные;
	колонка = СтрЗаменить ( тч.ТекущийЭлемент.Имя, ИмяТЧ, "" );
	карта = получитьКомментарииПоСтроке ( данные.Комментарий );
	п = Новый Структура ();
	п.Вставить ( "Карта", карта );
	п.Вставить ( "Колонка", колонка );
	п.Вставить ( "Данные", данные );
	ОткрытьФорму ( "ОбщаяФорма.ВводКомментария", Новый Структура ( "Комментарий", карта [ колонка ] ), Форма, , , , Новый ОписаниеОповещения ( "ПослеВводаКомментария", ЭтотОбъект, п ), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс );  
	
КонецПроцедуры

&НаКлиенте
Функция получитьКомментарииПоСтроке ( Комментарий )
	
	// && - разделитель по строкам
	// ## - разделитель по колонке
	м = СтрРазделить ( Комментарий, "&&", Ложь );
	карта = Новый Соответствие ();
	Для Каждого коммент Из м Цикл
		м = СтрРазделить ( коммент, "##", Ложь );
		Если ( м.Количество () = 2 ) Тогда
			карта.Вставить ( м [ 0 ], м [ 1 ] );			
		КонецЕсли; 
	КонецЦикла;
	Возврат карта;

КонецФункции

&НаКлиенте
Процедура ПослеВводаКомментария ( Ответ, Парамы ) Экспорт
	
	Если ( Ответ = Неопределено ) Тогда
		Возврат;
	КонецЕсли;
	комментарий = Ответ;
	карта = Парамы.Карта;
	колонка = Парамы.Колонка;
	Если ( комментарий = "" ) Тогда
		карта.Удалить ( колонка );
	Иначе
		Если ( карта [ колонка ] = Неопределено ) Тогда
			карта.Вставить ( колонка, комментарий );
		Иначе
			карта [ колонка ] = комментарий;  
		КонецЕсли; 
	КонецЕсли;
	записатьКомментарииВСтроку ( Парамы.Данные, карта );
	
КонецПроцедуры  

&НаКлиенте
Процедура УдалитьКомментарий ( Форма, ИмяТЧ ) Экспорт
	
	тч = Форма.Элементы [ ИмяТЧ ];
	данные = тч.ТекущиеДанные;
	колонка = СтрЗаменить ( тч.ТекущийЭлемент.Имя, ИмяТЧ, "" );
	карта = получитьКомментарииПоСтроке ( данные.Комментарий );
	карта.Удалить ( колонка );
	записатьКомментарииВСтроку ( данные, карта );
	
КонецПроцедуры

&НаКлиенте
Процедура записатьКомментарииВСтроку ( Данные, Карта )
	
	м = Новый Массив ();
	Для Каждого п Из Карта Цикл
		Если ( п.Значение = "" ) Тогда
			Продолжить;
		Иначе
			с = "##" + п.Ключ + "##" + п.Значение;
			данные [ п.Ключ + "Комментарий" ] = п.Значение;  
			м.Добавить ( с );
		КонецЕсли; 	
	КонецЦикла;
	Данные.Комментарий = "";
	Если ( м.Количество () > 0 ) Тогда
		Данные.Комментарий = СтрСоединить ( м, "&&" );
	КонецЕсли; 
	
КонецПроцедуры  

#конецобласти